{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Resume Basic Info Education & Personal Experience Career & Company \u5317\u4eac\u94f6\u884c Project Task Technology Stack \u6cf0\u5eb7\u521b\u65b0\u4e2d\u5fc3\u6838\u5fc3\u7814\u53d1\u90e8","title":"Welcome to Resume"},{"location":"#welcome-to-resume","text":"","title":"Welcome to Resume"},{"location":"#basic-info","text":"","title":"Basic Info"},{"location":"#education-personal-experience","text":"","title":"Education &amp; Personal Experience"},{"location":"#career-company","text":"\u5317\u4eac\u94f6\u884c Project Task Technology Stack \u6cf0\u5eb7\u521b\u65b0\u4e2d\u5fc3\u6838\u5fc3\u7814\u53d1\u90e8","title":"Career &amp; Company"},{"location":"algorithm/","text":"\u7b97\u6cd5","title":"\u7b97\u6cd5"},{"location":"algorithm/#_1","text":"","title":"\u7b97\u6cd5"},{"location":"fi/","text":"","title":"fi"},{"location":"foo/","text":"","title":"foo"},{"location":"computer/datastructure/datastructure/","text":"\u6570\u636e\u7ed3\u6784 \u57fa\u672c\u7ed3\u6784 \u62bd\u8c61\u64cd\u4f5c List Stack Queue String Array Glist Tree BinaryTree Graph InitList ( & L ) DestroyList ( & L ) ClearList ( & L ) ListEmpty ( L ) ListLength ( L ) GetElem ( L , i , & e ) LocateElem ( L , e , compare ()) PriorElem ( L , cur_e , & pre_e ) NextElem ( L , cur_e , & next_e ) ListInsert ( & L , i , e ) ListDelete ( & L , i , & e ) ListTraverse ( L , visit ()) InitStack ( & S ) DestroyStack ( & S ) ClearStack ( & S ) StackEmpty ( S ) StackLength ( S ) GetTop ( S , & e ) Push ( & S , e ) Pop ( & S , & e ) StackTraverse ( S , visit ()) InitQueue ( & Q ) DestroyQueue ( & Q ) ClearQueue ( & Q ) QueueEmpty ( Q ) QueueLength ( Q ) GetHead ( Q , & e ) EnQueue ( & Q , e ) DeQueue ( & Q , & e ) QueueTraverse ( Q , visit ()) StrAssign ( & T , S ) StrCopy ( & T , S ) StrEmpty ( S ) StrCompare ( S , T ) StrLength ( S ) ClearString ( & S ) Concat ( & T , S1 , S2 ) SubString ( & Sub , S , pos , len ) Index ( S , T , pos ) Replace ( & S , T , V ) StrInsert ( & S , pos , T ) StrDelete ( & S , pos , len ) DestroyString ( & S ) InitArray ( & A , n , bound1 , bound2 ,..., boundn ) DestroyArray ( & A ) Value ( A , & e , index1 ,..., indexn ) Assign ( & A , e , index1 ,..., indexn ) InitGlist ( & L ) CreateGlist ( & L , S ) DestroyGlist ( & L ) CopyGlist ( & T , L ) GlistLength ( L ) GlistDepth ( L ) GlistEmpty ( L ) GetGead ( L ) GetTail ( L ) InsertFirst_GL ( & L , e ) InsertFirst_GL ( & L , e ) DeleteFirst_GL ( & L , & e ) Traverse_GL ( L , Visit ()) InitTree ( & T ) DestroyTree ( & T ) CreateTree ( & T , definition ) TreeEmpty ( T ) TreeDepth ( T ) Root ( T ) Value ( T , cur_e ) Assign ( T , cur_e , value ) Parent ( T , cur_e ) LeftChild ( T , cur_e ) RightSibling ( T , cur_e ) InsertChild ( & T , & p , i , c ) DeleteChild ( & T , & p , i ) TraverseTree ( T , Visit ()) InitBiTree ( & T ) DestroyBiTree ( & T ) CreateBiTree ( & T , definition ) ClearBiTree ( & T ) BiTreeEmpty ( T ) BiTreeDepth ( T ) Root ( T ) Value ( T , e ) Assign ( T , & e , value ) Parent ( T , e ) LeftChild ( T , e ) RightSibling ( T , e ) LeftSibling ( T , e ) InsertChild ( T , p , LR , c ) DeleteChild ( T , p , LR ) PreOrderTraverse ( T , visit ()) InOrderTraverse ( T , visit ()) PostOrderTraverse ( T , visit ()) LevelOrderTraverse ( T , visit ()) GreateGraph ( & G , V , VR ) DestroyGraph ( & G ) LocateVex ( G , u ) GetVex ( G , v ) PutVex ( & G , v , value ) FirstAdjVex ( G , v ) NextAdjVex ( G , v , w ) InsertVex ( & G , v ) DeleteVex ( & G , v ) InsertArc ( & G , v , w ) DeleteArc ( & G , v , w ) DFSTraverse ( G , Visit (()) BFSTraverse ( G , Visit ()) graph A[\u6570\u636e\u64cd\u4f5c]---B[\u4e0e\u7ed3\u6784\u672c\u8eab\u6709\u5173]; B---1[InitXXX] B---2[DestroyXXX] B---3[ClearXXX] B---4[XXXEmpty] B---5[XXXLength\\Depth] A[\u6570\u636e\u64cd\u4f5c]---C[\u4e0e\u5143\u7d20\u6709\u5173]; C---6[Insert] C---7[Delete] C---8[Get] C---9[Locate] A[\u6570\u636e\u64cd\u4f5c]---D[\u904d\u5386\u8bbf\u95ee\u76f8\u5173]; D---10[TraverseXXX] A[\u6570\u636e\u64cd\u4f5c]---E[\u81ea\u8eab\u7279\u8272]; \u4e00\u3001\u7ebf\u578b \u7ebf\u6027\u8868-\u987a\u5e8f\u5b58\u50a8 graph LR A---B---C---D---E; DEF union() #define LIST_INIT_SIZE 100 #define LISTINCREMENT 10 typedef struct { ElemType * elem ; int length ; int listsize ; } SqList ; \u4e8c\u3001\u6811\u578b \u68ee\u6797 graph TB Name[Name:\u68ee\u6797 Amount:2] -.- A;Name -.- O A --- B;A --- C;A --- D; B --- E;B --- F;B --- G; C --- H;C --- I;C --- J;C --- K; D --- L;D --- M; M --- N; O --- P;O --- Q; O --- R; Q --- S;Q --- T; S --- U; \u666e\u901a\u6811 graph TB Name[Name:\u666e\u901a\u6811 Degree:4 Depth:4] -.- A; A --- B;A --- C;A --- D; B --- E;B --- F;B --- G; C --- H;C --- I;C --- J;C --- K; D --- L;D --- M; M --- N; B-\u6811 graph TB Name[Name:B-\u6811 Rank:4 Depth:4 ] -.- A; A[2:*15*60*] --- B[2:*2*8*];A --- C;A --- D; B --- E[1:*1*];B --- F[1:*6*];B --- G[1:*13*]; C[3:*20*35*55*] --- H[1:*18*];C --- I[1:*28*];C --- J[1:*41*];C --- K[1:*59*]; D[2:*80*90*] --- L[1:*72*];D --- M[1:*89*];D --- N[1:*94*]; B+\u6811 graph TB Name[Name:B+\u6811 Rank:4 Depth:3] -.- A; A[11 92 103] --- B[3 6 11];A --- C[19 26 78 92];A --- D[101 103]; B --- E[1 2 3];B --- F[4 5 6];B --- G[8 9 10 11]; C --- H[16 17 18 19];C --- I[25 26];C --- J[78];C --- K[91 92]; D --- L[100 101];D --- M[103]; \u952e\u6811 graph TB Name[Name:\u952e\u6811 Degree:4 Depth:5] -.- A; A --- B;A --- C;A --- D; B --- E;B --- F;B --- G; C --- H;C --- I;C --- J;C --- K; D --- L;D --- M; M --- N; E --> O[ABE];F --> P[ABF];G --> Q[ABG]; H --> R[ACH];I --> S[ACI];J --> T[ACJ];K --> U[ACK]; L --> V[ADL];N --> W[ADMN]; Huffman\u6811 graph TB Name[Name:Huffman\u6811 Degree:3 Depth:3] -.- A; A---B;A---C[C:4];A---D; B---E[E:13];B---F[F:11]; D---M(M:5);D---N(N:4) \u4e8c\u53c9\u6811 graph TB subgraph \u4e8c\u53c9\u6811 A[1] --- B[2];A --- C[3]; end subgraph \u6ee1\u4e8c\u53c9\u6811 1 --- 2;1 --- 3; 2 --- 4;2 --- 5; 3 --- 6;3 --- 7; end subgraph \u5b8c\u5168\u4e8c\u53c9\u6811 D[1] --- E[2];D[1] --- G[3]; E[2] --- I[4];E[2] --- K[5]; G[3] --- M[6]; end \u4e8c\u53c9\u6392\u5e8f\u6811 graph TB 42---25;42---66; 25---13; 66---56;66---98; 13---12;12---11; \u5e73\u8861\u6811 graph TB 42---25;42---66; 25---13;25---36;36---28;36---39; 66---56;66---98;56---45; 13---12;12---11;13---20 \u7ea2\u9ed1\u6811 \u4e09\u3001\u56fe\u578b \u7ec4\u5408\u7ed3\u6784","title":"\u6570\u636e\u7ed3\u6784"},{"location":"computer/datastructure/datastructure/#_1","text":"","title":"\u6570\u636e\u7ed3\u6784"},{"location":"computer/datastructure/datastructure/#_2","text":"","title":"\u57fa\u672c\u7ed3\u6784"},{"location":"computer/datastructure/datastructure/#_3","text":"List Stack Queue String Array Glist Tree BinaryTree Graph InitList ( & L ) DestroyList ( & L ) ClearList ( & L ) ListEmpty ( L ) ListLength ( L ) GetElem ( L , i , & e ) LocateElem ( L , e , compare ()) PriorElem ( L , cur_e , & pre_e ) NextElem ( L , cur_e , & next_e ) ListInsert ( & L , i , e ) ListDelete ( & L , i , & e ) ListTraverse ( L , visit ()) InitStack ( & S ) DestroyStack ( & S ) ClearStack ( & S ) StackEmpty ( S ) StackLength ( S ) GetTop ( S , & e ) Push ( & S , e ) Pop ( & S , & e ) StackTraverse ( S , visit ()) InitQueue ( & Q ) DestroyQueue ( & Q ) ClearQueue ( & Q ) QueueEmpty ( Q ) QueueLength ( Q ) GetHead ( Q , & e ) EnQueue ( & Q , e ) DeQueue ( & Q , & e ) QueueTraverse ( Q , visit ()) StrAssign ( & T , S ) StrCopy ( & T , S ) StrEmpty ( S ) StrCompare ( S , T ) StrLength ( S ) ClearString ( & S ) Concat ( & T , S1 , S2 ) SubString ( & Sub , S , pos , len ) Index ( S , T , pos ) Replace ( & S , T , V ) StrInsert ( & S , pos , T ) StrDelete ( & S , pos , len ) DestroyString ( & S ) InitArray ( & A , n , bound1 , bound2 ,..., boundn ) DestroyArray ( & A ) Value ( A , & e , index1 ,..., indexn ) Assign ( & A , e , index1 ,..., indexn ) InitGlist ( & L ) CreateGlist ( & L , S ) DestroyGlist ( & L ) CopyGlist ( & T , L ) GlistLength ( L ) GlistDepth ( L ) GlistEmpty ( L ) GetGead ( L ) GetTail ( L ) InsertFirst_GL ( & L , e ) InsertFirst_GL ( & L , e ) DeleteFirst_GL ( & L , & e ) Traverse_GL ( L , Visit ()) InitTree ( & T ) DestroyTree ( & T ) CreateTree ( & T , definition ) TreeEmpty ( T ) TreeDepth ( T ) Root ( T ) Value ( T , cur_e ) Assign ( T , cur_e , value ) Parent ( T , cur_e ) LeftChild ( T , cur_e ) RightSibling ( T , cur_e ) InsertChild ( & T , & p , i , c ) DeleteChild ( & T , & p , i ) TraverseTree ( T , Visit ()) InitBiTree ( & T ) DestroyBiTree ( & T ) CreateBiTree ( & T , definition ) ClearBiTree ( & T ) BiTreeEmpty ( T ) BiTreeDepth ( T ) Root ( T ) Value ( T , e ) Assign ( T , & e , value ) Parent ( T , e ) LeftChild ( T , e ) RightSibling ( T , e ) LeftSibling ( T , e ) InsertChild ( T , p , LR , c ) DeleteChild ( T , p , LR ) PreOrderTraverse ( T , visit ()) InOrderTraverse ( T , visit ()) PostOrderTraverse ( T , visit ()) LevelOrderTraverse ( T , visit ()) GreateGraph ( & G , V , VR ) DestroyGraph ( & G ) LocateVex ( G , u ) GetVex ( G , v ) PutVex ( & G , v , value ) FirstAdjVex ( G , v ) NextAdjVex ( G , v , w ) InsertVex ( & G , v ) DeleteVex ( & G , v ) InsertArc ( & G , v , w ) DeleteArc ( & G , v , w ) DFSTraverse ( G , Visit (()) BFSTraverse ( G , Visit ()) graph A[\u6570\u636e\u64cd\u4f5c]---B[\u4e0e\u7ed3\u6784\u672c\u8eab\u6709\u5173]; B---1[InitXXX] B---2[DestroyXXX] B---3[ClearXXX] B---4[XXXEmpty] B---5[XXXLength\\Depth] A[\u6570\u636e\u64cd\u4f5c]---C[\u4e0e\u5143\u7d20\u6709\u5173]; C---6[Insert] C---7[Delete] C---8[Get] C---9[Locate] A[\u6570\u636e\u64cd\u4f5c]---D[\u904d\u5386\u8bbf\u95ee\u76f8\u5173]; D---10[TraverseXXX] A[\u6570\u636e\u64cd\u4f5c]---E[\u81ea\u8eab\u7279\u8272];","title":"\u62bd\u8c61\u64cd\u4f5c"},{"location":"computer/datastructure/datastructure/#_4","text":"","title":"\u4e00\u3001\u7ebf\u578b"},{"location":"computer/datastructure/datastructure/#-","text":"graph LR A---B---C---D---E; DEF union() #define LIST_INIT_SIZE 100 #define LISTINCREMENT 10 typedef struct { ElemType * elem ; int length ; int listsize ; } SqList ;","title":"\u7ebf\u6027\u8868-\u987a\u5e8f\u5b58\u50a8"},{"location":"computer/datastructure/datastructure/#_5","text":"","title":"\u4e8c\u3001\u6811\u578b"},{"location":"computer/datastructure/datastructure/#_6","text":"graph TB Name[Name:\u68ee\u6797 Amount:2] -.- A;Name -.- O A --- B;A --- C;A --- D; B --- E;B --- F;B --- G; C --- H;C --- I;C --- J;C --- K; D --- L;D --- M; M --- N; O --- P;O --- Q; O --- R; Q --- S;Q --- T; S --- U;","title":"\u68ee\u6797"},{"location":"computer/datastructure/datastructure/#_7","text":"graph TB Name[Name:\u666e\u901a\u6811 Degree:4 Depth:4] -.- A; A --- B;A --- C;A --- D; B --- E;B --- F;B --- G; C --- H;C --- I;C --- J;C --- K; D --- L;D --- M; M --- N;","title":"\u666e\u901a\u6811"},{"location":"computer/datastructure/datastructure/#b-","text":"graph TB Name[Name:B-\u6811 Rank:4 Depth:4 ] -.- A; A[2:*15*60*] --- B[2:*2*8*];A --- C;A --- D; B --- E[1:*1*];B --- F[1:*6*];B --- G[1:*13*]; C[3:*20*35*55*] --- H[1:*18*];C --- I[1:*28*];C --- J[1:*41*];C --- K[1:*59*]; D[2:*80*90*] --- L[1:*72*];D --- M[1:*89*];D --- N[1:*94*];","title":"B-\u6811"},{"location":"computer/datastructure/datastructure/#b","text":"graph TB Name[Name:B+\u6811 Rank:4 Depth:3] -.- A; A[11 92 103] --- B[3 6 11];A --- C[19 26 78 92];A --- D[101 103]; B --- E[1 2 3];B --- F[4 5 6];B --- G[8 9 10 11]; C --- H[16 17 18 19];C --- I[25 26];C --- J[78];C --- K[91 92]; D --- L[100 101];D --- M[103];","title":"B+\u6811"},{"location":"computer/datastructure/datastructure/#_8","text":"graph TB Name[Name:\u952e\u6811 Degree:4 Depth:5] -.- A; A --- B;A --- C;A --- D; B --- E;B --- F;B --- G; C --- H;C --- I;C --- J;C --- K; D --- L;D --- M; M --- N; E --> O[ABE];F --> P[ABF];G --> Q[ABG]; H --> R[ACH];I --> S[ACI];J --> T[ACJ];K --> U[ACK]; L --> V[ADL];N --> W[ADMN];","title":"\u952e\u6811"},{"location":"computer/datastructure/datastructure/#huffman","text":"graph TB Name[Name:Huffman\u6811 Degree:3 Depth:3] -.- A; A---B;A---C[C:4];A---D; B---E[E:13];B---F[F:11]; D---M(M:5);D---N(N:4)","title":"Huffman\u6811"},{"location":"computer/datastructure/datastructure/#_9","text":"graph TB subgraph \u4e8c\u53c9\u6811 A[1] --- B[2];A --- C[3]; end subgraph \u6ee1\u4e8c\u53c9\u6811 1 --- 2;1 --- 3; 2 --- 4;2 --- 5; 3 --- 6;3 --- 7; end subgraph \u5b8c\u5168\u4e8c\u53c9\u6811 D[1] --- E[2];D[1] --- G[3]; E[2] --- I[4];E[2] --- K[5]; G[3] --- M[6]; end","title":"\u4e8c\u53c9\u6811"},{"location":"computer/datastructure/datastructure/#_10","text":"graph TB 42---25;42---66; 25---13; 66---56;66---98; 13---12;12---11;","title":"\u4e8c\u53c9\u6392\u5e8f\u6811"},{"location":"computer/datastructure/datastructure/#_11","text":"graph TB 42---25;42---66; 25---13;25---36;36---28;36---39; 66---56;66---98;56---45; 13---12;12---11;13---20","title":"\u5e73\u8861\u6811"},{"location":"computer/datastructure/datastructure/#_12","text":"","title":"\u7ea2\u9ed1\u6811"},{"location":"computer/datastructure/datastructure/#_13","text":"","title":"\u4e09\u3001\u56fe\u578b"},{"location":"computer/datastructure/datastructure/#_14","text":"","title":"\u7ec4\u5408\u7ed3\u6784"},{"location":"math/calculus/calculus/","text":"Calculus","title":"\u5fae\u79ef\u5206"},{"location":"math/calculus/calculus/#calculus","text":"","title":"Calculus"}]}