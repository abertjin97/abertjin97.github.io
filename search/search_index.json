{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Resume Basic Info Education & Personal Experience Career & Company \u5317\u4eac\u94f6\u884c Project Task Technology Stack \u6cf0\u5eb7\u521b\u65b0\u4e2d\u5fc3\u6838\u5fc3\u7814\u53d1\u90e8","title":"Welcome to Resume"},{"location":"#welcome-to-resume","text":"","title":"Welcome to Resume"},{"location":"#basic-info","text":"","title":"Basic Info"},{"location":"#education-personal-experience","text":"","title":"Education &amp; Personal Experience"},{"location":"#career-company","text":"\u5317\u4eac\u94f6\u884c Project Task Technology Stack \u6cf0\u5eb7\u521b\u65b0\u4e2d\u5fc3\u6838\u5fc3\u7814\u53d1\u90e8","title":"Career &amp; Company"},{"location":"fi/","text":"","title":"Fi"},{"location":"foo/","text":"","title":"Foo"},{"location":"computer/algorithm/","text":"\u7b97\u6cd5","title":"Algorithm"},{"location":"computer/algorithm/#_1","text":"","title":"\u7b97\u6cd5"},{"location":"java/architecture/springcloud/","text":"SpringCloud Components Implementation ServiceDiscovery eureka LoadBlance Ribbon Service Discover flowchart LR Producer-->|registry|ServiceRegistry; ServiceRegistry-->|Discover|Consumer; Consumer-.->|invoke|Producer;","title":"SpringCloud"},{"location":"java/architecture/springcloud/#springcloud","text":"Components Implementation ServiceDiscovery eureka LoadBlance Ribbon","title":"SpringCloud"},{"location":"java/architecture/springcloud/#service-discover","text":"flowchart LR Producer-->|registry|ServiceRegistry; ServiceRegistry-->|Discover|Consumer; Consumer-.->|invoke|Producer;","title":"Service Discover"},{"location":"java/component/redis/","text":"Redis\u6280\u672f\u624b\u518c \u5355\u7ebf\u7a0b\u963b\u585e\u5f0fTCP\u5185\u5b58\u670d\u52a1\u5668 Feature DataStructure Support String,List,Set,Sorted Set,Hash Cluster O Disk Persistence O Transactions O Pub/Sub O Partition O ##\u5206\u533a \u8303\u56f4\u5206\u533a \u54c8\u5e0c\u5206\u533a \u7ba1\u9053\u547d\u4ee4 \u6570\u636e\u5907\u4efd\u8fd8\u539f \u6301\u4e45\u5316 \u6267\u884cBGSAVE\u547d\u4ee4\u6216\u8005BGREWRITEAOF\u547d\u4ee4\u7684\u8fc7\u7a0b\u4e2d\uff0cRedis\u9700\u8981\u521b\u5efa\u5f53\u524d \u670d\u52a1\u5668\u8fdb\u7a0b\u7684\u5b50\u8fdb\u7a0b\uff0c\u800c\u5927\u591a\u6570\u64cd\u4f5c\u7cfb\u7edf\u90fd\u91c7\u7528\u5199\u65f6\u590d\u5236\uff08copy-on-write\uff09\u6765 \u4f18\u5316\u5b50\u8fdb\u7a0b\u7684\u4f7f\u7528\u6548\u7387\uff0c\u6240\u4ee5\u5728\u5b50\u8fdb\u7a0b\u5b58\u5728\u671f\u95f4\uff0c\u670d\u52a1\u5668\u4f1a\u63d0\u9ad8\u8d1f\u8f7d\u56e0\u5b50\u7684\u9608\u503c\uff0c\u4ece \u800c\u907f\u514d\u5728\u5b50\u8fdb\u7a0b\u5b58\u5728\u671f\u95f4\u8fdb\u884c\u54c8\u5e0c\u8868\u6269\u5c55\u64cd\u4f5c\uff0c\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u5185\u5b58\u5199\u5165\u64cd\u4f5c\uff0c\u6700\u5927\u9650\u5ea6\u5730 \u8282\u7ea6\u5185\u5b58\u3002 RDB SAVE : \u524d\u53f0\u6267\u884c\uff0c\u751f\u6210dump.rdb\u6587\u4ef6\uff0c\u963b\u585e\u7f51\u7edc\u670d\u52a1\u8bf7\u6c42 BGSAVE : \u540e\u53f0\u6267\u884c\uff0c\u751f\u6210dump.rdb\u6587\u4ef6 LASTSAV : \u67e5\u770bBGSAVE\u662f\u5426\u6210\u529f save 100 1 //100\u79d2\u5185\uff0c\u81f3\u5c11\u66f4\u65b0\u4e861\u6761\u6570\u636e\uff0cRedis\u81ea\u52a8\u89e6\u53d1BGSAVE\u547d\u4ee4 save 200 100 //200\u79d2\u5185\uff0c\u81f3\u5c11\u66f4\u65b0\u4e86100\u6761\u6570\u636e\uff0cRedis\u81ea\u52a8\u89e6\u53d1BGSAVE\u547d\u4ee4 save 60 1000 //60\u79d2\u5185\uff0c\u81f3\u5c11\u66f4\u65b0\u4e861000\u6761\u6570\u636e\uff0cRedis\u81ea\u52a8\u89e6\u53d1BGSAVE\u547d\u4ee4 AOF BGREWRITEAOF : \u91cd\u5199AOF\u6587\u4ef6 \u4e3b\u4ece\u6a21\u5f0f flowchart TD 01[(master)]-->|data copy|02[(slave)]; 01[(master)]-->|data copy|03[(slave)]; 01[(master)]-->|data copy|04[(slave)]; write-.->01;02-.->read;03-.->read;04-.->read; \u54e8\u5175\u6a21\u5f0f \u5206\u5e03\u5f0f\u9501","title":"Redis"},{"location":"java/component/redis/#redis","text":"\u5355\u7ebf\u7a0b\u963b\u585e\u5f0fTCP\u5185\u5b58\u670d\u52a1\u5668 Feature DataStructure Support String,List,Set,Sorted Set,Hash Cluster O Disk Persistence O Transactions O Pub/Sub O Partition O ##\u5206\u533a","title":"Redis\u6280\u672f\u624b\u518c"},{"location":"java/component/redis/#_1","text":"","title":"\u8303\u56f4\u5206\u533a"},{"location":"java/component/redis/#_2","text":"","title":"\u54c8\u5e0c\u5206\u533a"},{"location":"java/component/redis/#_3","text":"","title":"\u7ba1\u9053\u547d\u4ee4"},{"location":"java/component/redis/#_4","text":"","title":"\u6570\u636e\u5907\u4efd\u8fd8\u539f"},{"location":"java/component/redis/#_5","text":"\u6267\u884cBGSAVE\u547d\u4ee4\u6216\u8005BGREWRITEAOF\u547d\u4ee4\u7684\u8fc7\u7a0b\u4e2d\uff0cRedis\u9700\u8981\u521b\u5efa\u5f53\u524d \u670d\u52a1\u5668\u8fdb\u7a0b\u7684\u5b50\u8fdb\u7a0b\uff0c\u800c\u5927\u591a\u6570\u64cd\u4f5c\u7cfb\u7edf\u90fd\u91c7\u7528\u5199\u65f6\u590d\u5236\uff08copy-on-write\uff09\u6765 \u4f18\u5316\u5b50\u8fdb\u7a0b\u7684\u4f7f\u7528\u6548\u7387\uff0c\u6240\u4ee5\u5728\u5b50\u8fdb\u7a0b\u5b58\u5728\u671f\u95f4\uff0c\u670d\u52a1\u5668\u4f1a\u63d0\u9ad8\u8d1f\u8f7d\u56e0\u5b50\u7684\u9608\u503c\uff0c\u4ece \u800c\u907f\u514d\u5728\u5b50\u8fdb\u7a0b\u5b58\u5728\u671f\u95f4\u8fdb\u884c\u54c8\u5e0c\u8868\u6269\u5c55\u64cd\u4f5c\uff0c\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u5185\u5b58\u5199\u5165\u64cd\u4f5c\uff0c\u6700\u5927\u9650\u5ea6\u5730 \u8282\u7ea6\u5185\u5b58\u3002","title":"\u6301\u4e45\u5316"},{"location":"java/component/redis/#rdb","text":"SAVE : \u524d\u53f0\u6267\u884c\uff0c\u751f\u6210dump.rdb\u6587\u4ef6\uff0c\u963b\u585e\u7f51\u7edc\u670d\u52a1\u8bf7\u6c42 BGSAVE : \u540e\u53f0\u6267\u884c\uff0c\u751f\u6210dump.rdb\u6587\u4ef6 LASTSAV : \u67e5\u770bBGSAVE\u662f\u5426\u6210\u529f save 100 1 //100\u79d2\u5185\uff0c\u81f3\u5c11\u66f4\u65b0\u4e861\u6761\u6570\u636e\uff0cRedis\u81ea\u52a8\u89e6\u53d1BGSAVE\u547d\u4ee4 save 200 100 //200\u79d2\u5185\uff0c\u81f3\u5c11\u66f4\u65b0\u4e86100\u6761\u6570\u636e\uff0cRedis\u81ea\u52a8\u89e6\u53d1BGSAVE\u547d\u4ee4 save 60 1000 //60\u79d2\u5185\uff0c\u81f3\u5c11\u66f4\u65b0\u4e861000\u6761\u6570\u636e\uff0cRedis\u81ea\u52a8\u89e6\u53d1BGSAVE\u547d\u4ee4","title":"RDB"},{"location":"java/component/redis/#aof","text":"BGREWRITEAOF : \u91cd\u5199AOF\u6587\u4ef6","title":"AOF"},{"location":"java/component/redis/#_6","text":"flowchart TD 01[(master)]-->|data copy|02[(slave)]; 01[(master)]-->|data copy|03[(slave)]; 01[(master)]-->|data copy|04[(slave)]; write-.->01;02-.->read;03-.->read;04-.->read;","title":"\u4e3b\u4ece\u6a21\u5f0f"},{"location":"java/component/redis/#_7","text":"","title":"\u54e8\u5175\u6a21\u5f0f"},{"location":"java/component/redis/#_8","text":"","title":"\u5206\u5e03\u5f0f\u9501"},{"location":"java/component/store/datastructure/","text":"\u5e38\u7528\u5b58\u50a8\u7ec4\u4ef6\u6570\u636e\u7ed3\u6784 Mysql \u7c7b\u578b \u6574\u6570\u7c7b\u578b TINYINT,SMALLINT,MEDIUMINT,INT(INTERGER),BIGINT \u6d6e\u70b9\u7c7b\u578b FLOAT,DOUBLE \u5b9a\u70b9\u7c7b\u578b DECIMAL \u4f4d\u7c7b\u578b BIT \u65e5\u671f\u7c7b\u578b YEAR,TIME,DATE,DATETIME,TIMESTAMP \u6587\u672c\u5b57\u7b26\u4e32\u7c7b\u578b CHAR,VARCHAR,TINYTEXT,TEXT,MEDIUMTEXT,LONGTEXT \u679a\u4e3e\u7c7b\u578b ENUM \u96c6\u5408\u7c7b\u578b SET \u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u7c7b\u578b BINARY,VARBINARY,TINYBLOB,BLOB,MEDIUMBLOB,LONGBLOB JSON\u7c7b\u578b JSON OBJECT,JSON ARRAY","title":"\u6570\u636e\u7ed3\u6784"},{"location":"java/component/store/datastructure/#_1","text":"","title":"\u5e38\u7528\u5b58\u50a8\u7ec4\u4ef6\u6570\u636e\u7ed3\u6784"},{"location":"java/component/store/datastructure/#mysql","text":"\u7c7b\u578b \u6574\u6570\u7c7b\u578b TINYINT,SMALLINT,MEDIUMINT,INT(INTERGER),BIGINT \u6d6e\u70b9\u7c7b\u578b FLOAT,DOUBLE \u5b9a\u70b9\u7c7b\u578b DECIMAL \u4f4d\u7c7b\u578b BIT \u65e5\u671f\u7c7b\u578b YEAR,TIME,DATE,DATETIME,TIMESTAMP \u6587\u672c\u5b57\u7b26\u4e32\u7c7b\u578b CHAR,VARCHAR,TINYTEXT,TEXT,MEDIUMTEXT,LONGTEXT \u679a\u4e3e\u7c7b\u578b ENUM \u96c6\u5408\u7c7b\u578b SET \u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u7c7b\u578b BINARY,VARBINARY,TINYBLOB,BLOB,MEDIUMBLOB,LONGBLOB JSON\u7c7b\u578b JSON OBJECT,JSON ARRAY","title":"Mysql"},{"location":"java/interviewquestion/algorithm/","text":"\u7b97\u6cd5\u9898 \u4e00.\u5e38\u89c1\u6570\u636e\u7ed3\u6784 1.\u94fe\u8868 1.1\u5355\u5411\u94fe\u8868 1 2 3 4 5 6 7 8 9 10 11 class Node < E > { E data ; Node < E > next ; Node ( E data , Node < E > next ){ this . data = data ; this . next = next ;} } while ( pHead . next ) pHead = pHead . next ; //get last Node; for ( int i = 1 ; i < m ; i ++ ) pHead = pHead . next ; //get Node in m; while ( pHead . next . next ) pHead = pHead . next ; //get last-1 Node; 1.2\u53cc\u5411\u94fe\u8868 1 2 3 4 5 6 7 8 9 10 11 12 class Node < E > { E data ; Node < E > next ; Node < E > prev ; Node < E > ( E data , Node < E > next , Node < E > prev ){ this . data = data ; this . next = next ; this . prev = prev } } while ( pTail . prev ) pTail = pTail . prev ; for ( int i = 1 ; i < m ; i ++ ) pHead = pHead . next <=> for ( int i = 1 ; i < ( 1 + n ) - m ) pTail . prev = pTail . prev 2.\u961f\u5217 2.1\u6570\u7ec4\u961f\u5217 1 2 //front\u6307\u5411\u961f\u5934\uff0c\u51fa\u961f\u5217\u6307\u9488+1 //tail\u6307\u5411\u4e0b\u4e00\u4e2a\u5b58\u50a8\u7a7a\u95f4\uff0c\u5165\u961f\u5217\u6307\u9488+1 2.2\u94fe\u961f\u5217 1 2 //front\u6307\u5411\u5934\u8282\u70b9 //tail\u6307\u5411\u5c3e\u8282\u70b9 2.3\u53cc\u7aef\u961f\u5217 1 //end1\uff0cend2\u90fd\u53ef\u4ee5\u8fdb\u884c\u63d2\u5165\u5220\u9664\u64cd\u4f5c 3.\u6808 1.1\u53cd\u8f6c\u94fe\u8868 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 struct ListNode { int val ; struct ListNode * next ; }; struct ListNode * ReversList ( struct ListNode * pHead ){ if ( pHead == NULL || pHead -> next == NULL ) return pHead ; struct ListNode * f , * b ; b = pHead -> next ; f = pHead ; f -> next = NULL ; while ( b ){ f = b ; b = b -> next ; f -> next = pHead ; pHead = f ; } } // f b //[NULL]<-[O]-X-[O] // pHead //\u521d\u59cb\u6761\u4ef6\u540e\uff0cf\uff0cpHead\u6307\u9488\u7528\u4e8eb\u6307\u9488\u7684\u65ad\u70b9\u4fee\u590d,\u4fee\u590d\u5b8c\u6210\u540e\u8fdb\u5165\u4e0b\u4e00\u6b21\u4fee\u590d 1.2\u533a\u95f4\u53cd\u8f6c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 struct ListNode { int val ; struct ListNode * next ; }; struct ListNode * reverseBetween ( struct ListNode * head , m , n ){ if ( ! head ) return NULL ; if ( head -> next == NULL ) return head ; int len = n - m ; if ( ! len ) return head ; for ( int i = 1 ; i < m -1 ; i ++ ){ head = head -> next ; } struct ListNode * f , * b ; f = head -> next ; b = f -> next ; f -> next = } \u4e8c.\u5b57\u7b26\u4e32","title":"\u7b97\u6cd5\u9898"},{"location":"java/interviewquestion/algorithm/#_1","text":"","title":"\u7b97\u6cd5\u9898"},{"location":"java/interviewquestion/algorithm/#_2","text":"","title":"\u4e00.\u5e38\u89c1\u6570\u636e\u7ed3\u6784"},{"location":"java/interviewquestion/algorithm/#1","text":"","title":"1.\u94fe\u8868"},{"location":"java/interviewquestion/algorithm/#11","text":"1 2 3 4 5 6 7 8 9 10 11 class Node < E > { E data ; Node < E > next ; Node ( E data , Node < E > next ){ this . data = data ; this . next = next ;} } while ( pHead . next ) pHead = pHead . next ; //get last Node; for ( int i = 1 ; i < m ; i ++ ) pHead = pHead . next ; //get Node in m; while ( pHead . next . next ) pHead = pHead . next ; //get last-1 Node;","title":"1.1\u5355\u5411\u94fe\u8868"},{"location":"java/interviewquestion/algorithm/#12","text":"1 2 3 4 5 6 7 8 9 10 11 12 class Node < E > { E data ; Node < E > next ; Node < E > prev ; Node < E > ( E data , Node < E > next , Node < E > prev ){ this . data = data ; this . next = next ; this . prev = prev } } while ( pTail . prev ) pTail = pTail . prev ; for ( int i = 1 ; i < m ; i ++ ) pHead = pHead . next <=> for ( int i = 1 ; i < ( 1 + n ) - m ) pTail . prev = pTail . prev","title":"1.2\u53cc\u5411\u94fe\u8868"},{"location":"java/interviewquestion/algorithm/#2","text":"","title":"2.\u961f\u5217"},{"location":"java/interviewquestion/algorithm/#21","text":"1 2 //front\u6307\u5411\u961f\u5934\uff0c\u51fa\u961f\u5217\u6307\u9488+1 //tail\u6307\u5411\u4e0b\u4e00\u4e2a\u5b58\u50a8\u7a7a\u95f4\uff0c\u5165\u961f\u5217\u6307\u9488+1","title":"2.1\u6570\u7ec4\u961f\u5217"},{"location":"java/interviewquestion/algorithm/#22","text":"1 2 //front\u6307\u5411\u5934\u8282\u70b9 //tail\u6307\u5411\u5c3e\u8282\u70b9","title":"2.2\u94fe\u961f\u5217"},{"location":"java/interviewquestion/algorithm/#23","text":"1 //end1\uff0cend2\u90fd\u53ef\u4ee5\u8fdb\u884c\u63d2\u5165\u5220\u9664\u64cd\u4f5c","title":"2.3\u53cc\u7aef\u961f\u5217"},{"location":"java/interviewquestion/algorithm/#3","text":"1.1\u53cd\u8f6c\u94fe\u8868 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 struct ListNode { int val ; struct ListNode * next ; }; struct ListNode * ReversList ( struct ListNode * pHead ){ if ( pHead == NULL || pHead -> next == NULL ) return pHead ; struct ListNode * f , * b ; b = pHead -> next ; f = pHead ; f -> next = NULL ; while ( b ){ f = b ; b = b -> next ; f -> next = pHead ; pHead = f ; } } // f b //[NULL]<-[O]-X-[O] // pHead //\u521d\u59cb\u6761\u4ef6\u540e\uff0cf\uff0cpHead\u6307\u9488\u7528\u4e8eb\u6307\u9488\u7684\u65ad\u70b9\u4fee\u590d,\u4fee\u590d\u5b8c\u6210\u540e\u8fdb\u5165\u4e0b\u4e00\u6b21\u4fee\u590d 1.2\u533a\u95f4\u53cd\u8f6c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 struct ListNode { int val ; struct ListNode * next ; }; struct ListNode * reverseBetween ( struct ListNode * head , m , n ){ if ( ! head ) return NULL ; if ( head -> next == NULL ) return head ; int len = n - m ; if ( ! len ) return head ; for ( int i = 1 ; i < m -1 ; i ++ ){ head = head -> next ; } struct ListNode * f , * b ; f = head -> next ; b = f -> next ; f -> next = } \u4e8c.\u5b57\u7b26\u4e32","title":"3.\u6808"},{"location":"java/interviewquestion/basic/","text":"JAVA\u57fa\u7840\u9898","title":"\u57fa\u7840\u9898"},{"location":"java/interviewquestion/basic/#java","text":"","title":"JAVA\u57fa\u7840\u9898"},{"location":"java/interviewquestion/leecode/","text":"LeeCode 19\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u7ed3\u70b9 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode removeNthFromEnd ( ListNode head , int n ) { ListNode pre = new ListNode (); pre . next = head ; ListNode i = pre , j = pre ; for ( int m = 1 ; m < n ; m ++ ) i = i . next ; while ( i . next . next != null ){ i = i . next ; j = j . next ;} j . next = j . next . next ; return pre . next ; } } 20\u6709\u6548\u7684\u62ec\u53f7 class Solution { public boolean isValid ( String s ) { Deque < Character > stack = new LinkedList < Character > (); for ( char c : s . toCharArray ()){ if ( c == '(' ) stack . push ( ')' ); else if ( c == '{' ) stack . push ( '}' ); else if ( c == '[' ) stack . push ( ']' ); else if ( stack . isEmpty () || stack . pop () != c ) return false ; } return stack . isEmpty (); } } 21\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u5217\u8868 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode mergeTwoLists ( ListNode list1 , ListNode list2 ) { if ( list1 == null ) return list2 ; if ( list2 == null ) return list1 ; ListNode p = new ListNode (); ListNode h = p ; while (( list1 != null ) && ( list2 != null )){ if ( list1 . val < list2 . val ){ p . next = list1 ; list1 = list1 . next ;} else { p . next = list2 ; list2 = list2 . next ;} p = p . next ; } if ( list1 == null ) p . next = list2 ; if ( list2 == null ) p . next = list1 ; return h . next ; } } class Solution { public ListNode mergeTwoLists ( ListNode list1 , ListNode list2 ) { if ( list1 == null ) return list2 ; if ( list2 == null ) return list1 ; if ( list1 . val < list2 . val ){ list1 . next = mergeTwoLists ( list1 . next , list2 ); return list1 ; } list2 . next = mergeTwoLists ( list1 , list2 . next ); return list2 ; } } #### 53 \u6700\u5927\u5b50\u6570\u7ec4\u548c ``` java class Solution { class Solution { public int maxSubArray ( int [] nums ) { int max ; max = nums [ 0 ] ; for ( int i = 1 ; i < nums . length ; i ++ ){ nums [ i ]= Math . max ( nums [ i - 1 ]+ nums [ i ] , nums [ i ] ); max = Math . max ( max , nums [ i ] ); } return max ; } } class Solution { public int maxSubArray(int[] nums) { int ans = nums[0]; int sum = 0; for(int num: nums) { if(sum > 0) { sum += num; } else { sum = num; } ans = Math.max(ans, sum); } return ans; } } 83\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode deleteDuplicates ( ListNode head ) { if ( head == null || head . next == null ) return head ; ListNode curr = head ; while ( curr . next != null ){ if ( curr . val == curr . next . val ) curr . next = curr . next . next ; else curr = curr . next ; } return head ; } } class Solution { public ListNode deleteDuplicates ( ListNode head ) { if ( head == null || head . next == null ) return head ; head . next = deleteDuplicates ( head . next ); return head . val == head . next . val ? head . next : head ; } } 88\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4 class Solution { public void merge ( int [] nums1 , int m , int [] nums2 , int n ) { int k = m + n ; int [] temp = new int [ k ] ; for ( int i = 0 , i1 = 0 , i2 = 0 ; i < k ; i ++ ){ if ( i1 == m ) temp [ i ]= nums2 [ i2 ++] ; else if ( i2 == n ) temp [ i ]= nums1 [ i1 ++] ; else if ( nums1 [ i1 ]< nums2 [ i2 ] ) temp [ i ]= nums1 [ i1 ++] ; else temp [ i ]= nums2 [ i2 ++] ; } for ( int i = 0 ; i < k ; i ++ ) nums1 [ i ]= temp [ i ] ; } } //S(m+n),O(m+n) class Solution { public void merge ( int [] nums1 , int m , int [] nums2 , int n ) { m -- ; n -- ; for ( int i = nums1 . length - 1 ; i >= 0 ; i -- ){ if ( m ==- 1 ) nums1 [ i ]= nums2 [ n --] ; else if ( n ==- 1 ) break ; else if ( nums1 [ m ]> nums2 [ n ] ) nums1 [ i ]= nums1 [ m --] ; else nums1 [ i ]= nums2 [ n --] ; } } } //S(0),O(m+n) 101\u5bf9\u79f0\u4e8c\u53c9\u6811 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public boolean isSymmetric ( TreeNode root ) { if ( root == null ) return true ; return check ( root . left , root . right ); } public boolean check ( TreeNode left , TreeNode right ){ if ( left == null && right == null ) return true ; if ( left == null || right == null ) return false ; if ( left . val != right . val ) return false ; return ( check ( left . left , right . right ) && check ( left . right , right . left )); } } 104\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public int maxDepth ( TreeNode root ) { if ( root == null ) return 0 ; return Math . max ( maxDepth ( root . left ), maxDepth ( root . right )) + 1 ; } } 110\u5e73\u8861\u4e8c\u53c9\u6811 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public boolean isBalanced ( TreeNode root ) { if ( root == null ) return true ; return judge ( root ) !=- 1 ; } public int judge ( TreeNode node ){ if ( node == null ) return 0 ; int l = judge ( node . left ); int r = judge ( node . right ); if ( l ==- 1 || r ==- 1 || Math . abs ( l - r ) > 1 ) return - 1 ; return Math . max ( l , r ) + 1 ; } } 136\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 class Solution { public int singleNumber ( int [] nums ) { int res = 0 ; for ( int num : nums ) res = res ^ num ; return res ; } } 141\u73af\u5f62\u94fe\u8868 /** * Definition for singly-linked list. * class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */ public class Solution { public boolean hasCycle(ListNode head) { if(head==null)return false; ListNode i=head; while(i.next!=null&&i.next.next!=null){ head=head.next; i=i.next.next; if(head==i)return true; } return false; } } 142\u73af\u5f62\u94fe\u8868 II /** * Definition for singly-linked list. * class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */ public class Solution { public ListNode detectCycle ( ListNode head ) { if ( head == null ) return head ; ListNode i = head ; ListNode j = head ; int pos = 0 ; while ( i . next != null && i . next . next != null ){ j = j . next ; i = i . next . next ; if ( j == i ){ pos = 1 ; break ;} } if ( pos != 0 ){ j = head ; while ( j != i ){ j = j . next ; i = i . next ;} return j ; } else return null ; } } /* \u8bbe\u5feb\u6307\u9488\u4e3af\uff0c\u9012\u589e2\uff1b\u6162\u6307\u9488\u4e3as\uff0c\u9012\u589e1\uff0c\u5faa\u73af\u6b21\u6570\u4e3ai\uff08i=0\uff0c1\uff0c2\uff0c3\uff09\uff0c\u94fe\u8868\u4ece1\u5f00\u59cb\u7f16\u53f7,\u957f\u5ea6\u4e3an\uff0c\u73af\u5165\u53e3\u4f4d\u7f6e\u4e3ax s\u7b2ci\u6b21\u7684\u4e0b\u6807\u603b\u589e\u957f\u4e3aTs\uff0cf\u7b2ci\u6b21\u7684\u603b\u589e\u957f\u4e3aTf\uff0c\u73af\u7684\u957f\u5ea6\u4e3alen\u3002 \u5219\u5728\u6709\u73af\u7684\u60c5\u51b5\u4e0bs\u8fdb\u5165\u73af\u540e\u6307\u5411\u8282\u70b9\u7f16\u53f7\u4e3ax+(Ts-x)%(len) \u5219\u5728\u6709\u73af\u7684\u60c5\u51b5\u4e0bf\u8fdb\u5165\u73af\u540e\u6307\u5411\u8282\u70b9\u7f16\u53f7\u4e3ax+(Tf-x)%(len) \u76f8\u9047\u65f6{x+(Ts-x)%(len)}={x+(Tf-x)%(len)} \u7531\u9898\u77e5Ts=i\uff1bTf=2i\uff0c\u5e26\u5165\u89e3\u5f97(i-x)%len=(2i-x)%len;i-x+a*len=2i-x+b*len--> i=(a-b)len.\u7531\u4e8e\u7b2c\u4e00\u6b21\u76f8\u9047\u65f6i\u53d6\u6700\u5c0f\uff0ci=len; \u5e26\u5165\u603b\u6570\u5f97Ts=len;Ts=2len;\u76f8\u9047\u65f6\u7684\u4e0b\u6807\u4e3a x+(len-x)%len=x-x%len;x+(2len-x)%len\u3002 \u82e5\u4e24\u8fb9\u5404\u52a0x\uff0c\u5219x=x\uff0c\u4f1a\u518d\u6b21\u76f8\u9047\uff0c\u5373\u4e0b\u4e00\u6b21\u76f8\u9047\u7684\u4e3ax\u5165\u53e3\u5750\u6807 \u56e0\u6b64\u7b2c\u4e00\u6b21\u76f8\u9047\u540e\uff0c\u5c06\u6162\u6307\u9488\u79fb\u52a8\u5230\u8d77\u70b9\uff0c\u5feb\u6307\u9488\u8bbe\u7f6e\u4e3a\u9012\u589e1\uff0c\u76f8\u9047\u65f6\u5373\u4ee3\u8868x\u6240\u5728\u8282\u70b9\u3002 */ 160\u76f8\u4ea4\u94fe\u8868 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */ public class Solution { public ListNode getIntersectionNode ( ListNode headA , ListNode headB ) { if ( headA == null || headB == null ) return null ; ListNode pA = headA ; ListNode pB = headB ; while ( pA != pB ){ pA = pA == null ? headB : pA . next ; pB = pB == null ? headA : pB . next ; } return pA ; } } 206\u53cd\u8f6c\u94fe\u8868 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode reverseList ( ListNode head ) { if ( head == null || head . next == null ) return head ; ListNode cursor = head , pre = null , temp = null ; while ( cursor != null ){ pre = cursor ; cursor = cursor . next ; pre . next = temp ; temp = pre ; } return pre ; } } class Solution { public ListNode reverseList ( ListNode head ) { if ( head == null || head . next == null ) return head ; ListNode cur = reverseList ( head . next ); head . next . next = head ; head . next = null ; return cur ; } } 226\u7ffb\u8f6c\u4e8c\u53c9\u6811 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public TreeNode invertTree ( TreeNode root ) { if ( root == null ) return root ; invertTree ( root . left ); invertTree ( root . right ); TreeNode temp ; temp = root . left ; root . left = root . right ; root . right = temp ; return root ; } } 234\u56de\u6587\u94fe\u8868 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public boolean isPalindrome ( ListNode head ) { ListNode f = head , s = head ; while ( f != null && f . next != null ){ f = f . next . next ; s = s . next ; } if ( f != null ) s = s . next ; f = head ; s = reverseList ( s ); while ( s != null ){ if ( s . val != f . val ) return false ; s = s . next ; f = f . next ; } return true ; } public ListNode reverseList ( ListNode head ){ if ( head == null || head . next == null ) return head ; ListNode cursor = head , pre = null , temp = null ; while ( cursor != null ){ pre = cursor ; cursor = cursor . next ; pre . next = temp ; temp = pre ; } return pre ; } } 283\u79fb\u52a8\u96f6 class Solution { public void moveZeroes ( int [] nums ) { if ( nums == null ) return ; int j = 0 ; for ( int i = 0 ; i < nums . length ; i ++ ) if ( nums [ i ]!= 0 ) nums [ j ++]= nums [ i ] ; for ( int i = j ; i < nums . length ; i ++ ) nums [ i ]= 0 ; } } class Solution { public void moveZeroes ( int [] nums ) { if ( nums == null || nums . length == 0 ) return ; int i = 0 ; for ( int num : nums ) if ( num != 0 ) nums [ i ++]= num ; while ( i < nums . length ) nums [ i ++]= 0 ; } } 300\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217 class Solution { public int lengthOfLIS ( int [] nums ){ int [] dp = new int [ nums . length ] ; dp [ 0 ]= 1 ; int max = 1 ; for ( int i = 1 ; i < nums . length ; i ++ ){ dp [ i ]= 1 ; for ( int j = 0 ; j < i ; j ++ ){ if ( nums [ i ]> nums [ j ] ) dp [ i ]= Math . max ( dp [ i ] , dp [ j ]+ 1 ); } max = Math . max ( dp [ i ] , max ); } return max ; } 338\u6bd4\u7279\u4f4d\u8ba1\u6570 class Solution { public int [] countBits ( int n ) { int [] res = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) res [ i ]= res [ i & ( i - 1 ) ]+ 1 ; return res ; } } 415\u5b57\u7b26\u4e32\u76f8\u52a0 class Solution { public String addStrings ( String num1 , String num2 ) { StringBuilder sb = new StringBuilder (); int carry = 0 ; for ( int i = num1 . length () - 1 , j = num2 . length () - 1 ; i >= 0 || j >= 0 || carry == 1 ; i -- , j -- ){ int x = i < 0 ? 0 : num1 . charAt ( i ) - '0' ; int y = j < 0 ? 0 : num2 . charAt ( j ) - '0' ; sb . append (( carry + x + y ) % 10 ); carry = ( x + y + carry ) / 10 ; } return sb . reverse (). toString (); } } 448\u627e\u5230\u6240\u6709\u6570\u7ec4\u4e2d\u6d88\u5931\u7684\u6570\u5b57 class Solution { public List < Integer > findDisappearedNumbers ( int [] nums ) { List < Integer > container = new ArrayList (); int flag = 0 ; for ( int i = 1 ; i <= nums . length ; i ++ ){ for ( int j = 0 ; j < nums . length ; j ++ ) if ( nums [ j ]== i ) flag = 1 ; if ( flag == 0 ) container . add ( i ); flag = 0 ; } return container ; } } class Solution { public List < Integer > findDisappearedNumbers ( int [] nums ) { List box = new ArrayList (); for ( int i = 0 ; i < nums . length ; i ++ ){ nums [ ( nums [ i ]- 1 ) % nums . length ]+= nums . length ;} for ( int j = 0 ; j < nums . length ; j ++ ){ if ( nums [ j ]<= nums . length ) box . add ( j + 1 );} return box ; } } 461\u6c49\u660e\u8ddd\u79bb class Solution { public int hammingDistance ( int x , int y ) { int d = 0 ; for ( int xor = x ^ y ; xor != 0 ; xor &= xor - 1 ) d ++ ; return d ; } } 1048\u6700\u957f\u5b57\u7b26\u4e32\u94fe class Solution { int max = 1 ; public int longestStrChain ( String [] words ){ int n = words . length ; Arrays . sort ( words ,) } }","title":"Leecode\u9898\u5e93"},{"location":"java/interviewquestion/leecode/#leecode","text":"","title":"LeeCode"},{"location":"java/interviewquestion/leecode/#19n","text":"/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode removeNthFromEnd ( ListNode head , int n ) { ListNode pre = new ListNode (); pre . next = head ; ListNode i = pre , j = pre ; for ( int m = 1 ; m < n ; m ++ ) i = i . next ; while ( i . next . next != null ){ i = i . next ; j = j . next ;} j . next = j . next . next ; return pre . next ; } }","title":"19\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u7ed3\u70b9"},{"location":"java/interviewquestion/leecode/#20","text":"class Solution { public boolean isValid ( String s ) { Deque < Character > stack = new LinkedList < Character > (); for ( char c : s . toCharArray ()){ if ( c == '(' ) stack . push ( ')' ); else if ( c == '{' ) stack . push ( '}' ); else if ( c == '[' ) stack . push ( ']' ); else if ( stack . isEmpty () || stack . pop () != c ) return false ; } return stack . isEmpty (); } }","title":"20\u6709\u6548\u7684\u62ec\u53f7"},{"location":"java/interviewquestion/leecode/#21","text":"/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode mergeTwoLists ( ListNode list1 , ListNode list2 ) { if ( list1 == null ) return list2 ; if ( list2 == null ) return list1 ; ListNode p = new ListNode (); ListNode h = p ; while (( list1 != null ) && ( list2 != null )){ if ( list1 . val < list2 . val ){ p . next = list1 ; list1 = list1 . next ;} else { p . next = list2 ; list2 = list2 . next ;} p = p . next ; } if ( list1 == null ) p . next = list2 ; if ( list2 == null ) p . next = list1 ; return h . next ; } } class Solution { public ListNode mergeTwoLists ( ListNode list1 , ListNode list2 ) { if ( list1 == null ) return list2 ; if ( list2 == null ) return list1 ; if ( list1 . val < list2 . val ){ list1 . next = mergeTwoLists ( list1 . next , list2 ); return list1 ; } list2 . next = mergeTwoLists ( list1 , list2 . next ); return list2 ; } } #### 53 \u6700\u5927\u5b50\u6570\u7ec4\u548c ``` java class Solution { class Solution { public int maxSubArray ( int [] nums ) { int max ; max = nums [ 0 ] ; for ( int i = 1 ; i < nums . length ; i ++ ){ nums [ i ]= Math . max ( nums [ i - 1 ]+ nums [ i ] , nums [ i ] ); max = Math . max ( max , nums [ i ] ); } return max ; } } class Solution { public int maxSubArray(int[] nums) { int ans = nums[0]; int sum = 0; for(int num: nums) { if(sum > 0) { sum += num; } else { sum = num; } ans = Math.max(ans, sum); } return ans; } }","title":"21\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u5217\u8868"},{"location":"java/interviewquestion/leecode/#83","text":"/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode deleteDuplicates ( ListNode head ) { if ( head == null || head . next == null ) return head ; ListNode curr = head ; while ( curr . next != null ){ if ( curr . val == curr . next . val ) curr . next = curr . next . next ; else curr = curr . next ; } return head ; } } class Solution { public ListNode deleteDuplicates ( ListNode head ) { if ( head == null || head . next == null ) return head ; head . next = deleteDuplicates ( head . next ); return head . val == head . next . val ? head . next : head ; } }","title":"83\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20"},{"location":"java/interviewquestion/leecode/#88","text":"class Solution { public void merge ( int [] nums1 , int m , int [] nums2 , int n ) { int k = m + n ; int [] temp = new int [ k ] ; for ( int i = 0 , i1 = 0 , i2 = 0 ; i < k ; i ++ ){ if ( i1 == m ) temp [ i ]= nums2 [ i2 ++] ; else if ( i2 == n ) temp [ i ]= nums1 [ i1 ++] ; else if ( nums1 [ i1 ]< nums2 [ i2 ] ) temp [ i ]= nums1 [ i1 ++] ; else temp [ i ]= nums2 [ i2 ++] ; } for ( int i = 0 ; i < k ; i ++ ) nums1 [ i ]= temp [ i ] ; } } //S(m+n),O(m+n) class Solution { public void merge ( int [] nums1 , int m , int [] nums2 , int n ) { m -- ; n -- ; for ( int i = nums1 . length - 1 ; i >= 0 ; i -- ){ if ( m ==- 1 ) nums1 [ i ]= nums2 [ n --] ; else if ( n ==- 1 ) break ; else if ( nums1 [ m ]> nums2 [ n ] ) nums1 [ i ]= nums1 [ m --] ; else nums1 [ i ]= nums2 [ n --] ; } } } //S(0),O(m+n)","title":"88\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4"},{"location":"java/interviewquestion/leecode/#101","text":"/** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public boolean isSymmetric ( TreeNode root ) { if ( root == null ) return true ; return check ( root . left , root . right ); } public boolean check ( TreeNode left , TreeNode right ){ if ( left == null && right == null ) return true ; if ( left == null || right == null ) return false ; if ( left . val != right . val ) return false ; return ( check ( left . left , right . right ) && check ( left . right , right . left )); } }","title":"101\u5bf9\u79f0\u4e8c\u53c9\u6811"},{"location":"java/interviewquestion/leecode/#104","text":"/** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public int maxDepth ( TreeNode root ) { if ( root == null ) return 0 ; return Math . max ( maxDepth ( root . left ), maxDepth ( root . right )) + 1 ; } }","title":"104\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6"},{"location":"java/interviewquestion/leecode/#110","text":"/** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public boolean isBalanced ( TreeNode root ) { if ( root == null ) return true ; return judge ( root ) !=- 1 ; } public int judge ( TreeNode node ){ if ( node == null ) return 0 ; int l = judge ( node . left ); int r = judge ( node . right ); if ( l ==- 1 || r ==- 1 || Math . abs ( l - r ) > 1 ) return - 1 ; return Math . max ( l , r ) + 1 ; } }","title":"110\u5e73\u8861\u4e8c\u53c9\u6811"},{"location":"java/interviewquestion/leecode/#136","text":"class Solution { public int singleNumber ( int [] nums ) { int res = 0 ; for ( int num : nums ) res = res ^ num ; return res ; } }","title":"136\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57"},{"location":"java/interviewquestion/leecode/#141","text":"/** * Definition for singly-linked list. * class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */ public class Solution { public boolean hasCycle(ListNode head) { if(head==null)return false; ListNode i=head; while(i.next!=null&&i.next.next!=null){ head=head.next; i=i.next.next; if(head==i)return true; } return false; } }","title":"141\u73af\u5f62\u94fe\u8868"},{"location":"java/interviewquestion/leecode/#142-ii","text":"/** * Definition for singly-linked list. * class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */ public class Solution { public ListNode detectCycle ( ListNode head ) { if ( head == null ) return head ; ListNode i = head ; ListNode j = head ; int pos = 0 ; while ( i . next != null && i . next . next != null ){ j = j . next ; i = i . next . next ; if ( j == i ){ pos = 1 ; break ;} } if ( pos != 0 ){ j = head ; while ( j != i ){ j = j . next ; i = i . next ;} return j ; } else return null ; } } /* \u8bbe\u5feb\u6307\u9488\u4e3af\uff0c\u9012\u589e2\uff1b\u6162\u6307\u9488\u4e3as\uff0c\u9012\u589e1\uff0c\u5faa\u73af\u6b21\u6570\u4e3ai\uff08i=0\uff0c1\uff0c2\uff0c3\uff09\uff0c\u94fe\u8868\u4ece1\u5f00\u59cb\u7f16\u53f7,\u957f\u5ea6\u4e3an\uff0c\u73af\u5165\u53e3\u4f4d\u7f6e\u4e3ax s\u7b2ci\u6b21\u7684\u4e0b\u6807\u603b\u589e\u957f\u4e3aTs\uff0cf\u7b2ci\u6b21\u7684\u603b\u589e\u957f\u4e3aTf\uff0c\u73af\u7684\u957f\u5ea6\u4e3alen\u3002 \u5219\u5728\u6709\u73af\u7684\u60c5\u51b5\u4e0bs\u8fdb\u5165\u73af\u540e\u6307\u5411\u8282\u70b9\u7f16\u53f7\u4e3ax+(Ts-x)%(len) \u5219\u5728\u6709\u73af\u7684\u60c5\u51b5\u4e0bf\u8fdb\u5165\u73af\u540e\u6307\u5411\u8282\u70b9\u7f16\u53f7\u4e3ax+(Tf-x)%(len) \u76f8\u9047\u65f6{x+(Ts-x)%(len)}={x+(Tf-x)%(len)} \u7531\u9898\u77e5Ts=i\uff1bTf=2i\uff0c\u5e26\u5165\u89e3\u5f97(i-x)%len=(2i-x)%len;i-x+a*len=2i-x+b*len--> i=(a-b)len.\u7531\u4e8e\u7b2c\u4e00\u6b21\u76f8\u9047\u65f6i\u53d6\u6700\u5c0f\uff0ci=len; \u5e26\u5165\u603b\u6570\u5f97Ts=len;Ts=2len;\u76f8\u9047\u65f6\u7684\u4e0b\u6807\u4e3a x+(len-x)%len=x-x%len;x+(2len-x)%len\u3002 \u82e5\u4e24\u8fb9\u5404\u52a0x\uff0c\u5219x=x\uff0c\u4f1a\u518d\u6b21\u76f8\u9047\uff0c\u5373\u4e0b\u4e00\u6b21\u76f8\u9047\u7684\u4e3ax\u5165\u53e3\u5750\u6807 \u56e0\u6b64\u7b2c\u4e00\u6b21\u76f8\u9047\u540e\uff0c\u5c06\u6162\u6307\u9488\u79fb\u52a8\u5230\u8d77\u70b9\uff0c\u5feb\u6307\u9488\u8bbe\u7f6e\u4e3a\u9012\u589e1\uff0c\u76f8\u9047\u65f6\u5373\u4ee3\u8868x\u6240\u5728\u8282\u70b9\u3002 */","title":"142\u73af\u5f62\u94fe\u8868 II"},{"location":"java/interviewquestion/leecode/#160","text":"/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */ public class Solution { public ListNode getIntersectionNode ( ListNode headA , ListNode headB ) { if ( headA == null || headB == null ) return null ; ListNode pA = headA ; ListNode pB = headB ; while ( pA != pB ){ pA = pA == null ? headB : pA . next ; pB = pB == null ? headA : pB . next ; } return pA ; } }","title":"160\u76f8\u4ea4\u94fe\u8868"},{"location":"java/interviewquestion/leecode/#206","text":"/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode reverseList ( ListNode head ) { if ( head == null || head . next == null ) return head ; ListNode cursor = head , pre = null , temp = null ; while ( cursor != null ){ pre = cursor ; cursor = cursor . next ; pre . next = temp ; temp = pre ; } return pre ; } } class Solution { public ListNode reverseList ( ListNode head ) { if ( head == null || head . next == null ) return head ; ListNode cur = reverseList ( head . next ); head . next . next = head ; head . next = null ; return cur ; } }","title":"206\u53cd\u8f6c\u94fe\u8868"},{"location":"java/interviewquestion/leecode/#226","text":"/** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public TreeNode invertTree ( TreeNode root ) { if ( root == null ) return root ; invertTree ( root . left ); invertTree ( root . right ); TreeNode temp ; temp = root . left ; root . left = root . right ; root . right = temp ; return root ; } }","title":"226\u7ffb\u8f6c\u4e8c\u53c9\u6811"},{"location":"java/interviewquestion/leecode/#234","text":"/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public boolean isPalindrome ( ListNode head ) { ListNode f = head , s = head ; while ( f != null && f . next != null ){ f = f . next . next ; s = s . next ; } if ( f != null ) s = s . next ; f = head ; s = reverseList ( s ); while ( s != null ){ if ( s . val != f . val ) return false ; s = s . next ; f = f . next ; } return true ; } public ListNode reverseList ( ListNode head ){ if ( head == null || head . next == null ) return head ; ListNode cursor = head , pre = null , temp = null ; while ( cursor != null ){ pre = cursor ; cursor = cursor . next ; pre . next = temp ; temp = pre ; } return pre ; } }","title":"234\u56de\u6587\u94fe\u8868"},{"location":"java/interviewquestion/leecode/#283","text":"class Solution { public void moveZeroes ( int [] nums ) { if ( nums == null ) return ; int j = 0 ; for ( int i = 0 ; i < nums . length ; i ++ ) if ( nums [ i ]!= 0 ) nums [ j ++]= nums [ i ] ; for ( int i = j ; i < nums . length ; i ++ ) nums [ i ]= 0 ; } } class Solution { public void moveZeroes ( int [] nums ) { if ( nums == null || nums . length == 0 ) return ; int i = 0 ; for ( int num : nums ) if ( num != 0 ) nums [ i ++]= num ; while ( i < nums . length ) nums [ i ++]= 0 ; } }","title":"283\u79fb\u52a8\u96f6"},{"location":"java/interviewquestion/leecode/#300","text":"class Solution { public int lengthOfLIS ( int [] nums ){ int [] dp = new int [ nums . length ] ; dp [ 0 ]= 1 ; int max = 1 ; for ( int i = 1 ; i < nums . length ; i ++ ){ dp [ i ]= 1 ; for ( int j = 0 ; j < i ; j ++ ){ if ( nums [ i ]> nums [ j ] ) dp [ i ]= Math . max ( dp [ i ] , dp [ j ]+ 1 ); } max = Math . max ( dp [ i ] , max ); } return max ; }","title":"300\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217"},{"location":"java/interviewquestion/leecode/#338","text":"class Solution { public int [] countBits ( int n ) { int [] res = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) res [ i ]= res [ i & ( i - 1 ) ]+ 1 ; return res ; } }","title":"338\u6bd4\u7279\u4f4d\u8ba1\u6570"},{"location":"java/interviewquestion/leecode/#415","text":"class Solution { public String addStrings ( String num1 , String num2 ) { StringBuilder sb = new StringBuilder (); int carry = 0 ; for ( int i = num1 . length () - 1 , j = num2 . length () - 1 ; i >= 0 || j >= 0 || carry == 1 ; i -- , j -- ){ int x = i < 0 ? 0 : num1 . charAt ( i ) - '0' ; int y = j < 0 ? 0 : num2 . charAt ( j ) - '0' ; sb . append (( carry + x + y ) % 10 ); carry = ( x + y + carry ) / 10 ; } return sb . reverse (). toString (); } }","title":"415\u5b57\u7b26\u4e32\u76f8\u52a0"},{"location":"java/interviewquestion/leecode/#448","text":"class Solution { public List < Integer > findDisappearedNumbers ( int [] nums ) { List < Integer > container = new ArrayList (); int flag = 0 ; for ( int i = 1 ; i <= nums . length ; i ++ ){ for ( int j = 0 ; j < nums . length ; j ++ ) if ( nums [ j ]== i ) flag = 1 ; if ( flag == 0 ) container . add ( i ); flag = 0 ; } return container ; } } class Solution { public List < Integer > findDisappearedNumbers ( int [] nums ) { List box = new ArrayList (); for ( int i = 0 ; i < nums . length ; i ++ ){ nums [ ( nums [ i ]- 1 ) % nums . length ]+= nums . length ;} for ( int j = 0 ; j < nums . length ; j ++ ){ if ( nums [ j ]<= nums . length ) box . add ( j + 1 );} return box ; } }","title":"448\u627e\u5230\u6240\u6709\u6570\u7ec4\u4e2d\u6d88\u5931\u7684\u6570\u5b57"},{"location":"java/interviewquestion/leecode/#461","text":"class Solution { public int hammingDistance ( int x , int y ) { int d = 0 ; for ( int xor = x ^ y ; xor != 0 ; xor &= xor - 1 ) d ++ ; return d ; } }","title":"461\u6c49\u660e\u8ddd\u79bb"},{"location":"java/interviewquestion/leecode/#1048","text":"class Solution { int max = 1 ; public int longestStrChain ( String [] words ){ int n = words . length ; Arrays . sort ( words ,) } }","title":"1048\u6700\u957f\u5b57\u7b26\u4e32\u94fe"},{"location":"java/net/socket/","text":"Socket\u539f\u7406 \u6b64\u680f\u76ee\u6587\u7ae0\u9700\u914d\u5408LearningNote\u6f14\u793a\u4ee3\u7801 Socket API ServerSocket \u6784\u9020\u5668 ServerSocket(int port) throws IOException :\u6700\u5e38\u7528\u7684\u5b9e\u73b0\uff0c\u7ed1\u5b9a\u6307\u5b9a\u7aef\u53e3 ServerSocket(int port, int backlog) throws IOException :TCP\u8bf7\u6c42->\u5165\u961f->\u64cd\u4f5c\u7cfb\u7edf\u63a5\u53d7\u961f\u5217->accept()->\u51fa\u961f\uff0cbacklog\u8bbe\u7f6e\u961f\u5217\u957f\u5ea6 ServerSocket(int port, int backlog, InetAddress bindAddr) :bindAddr\u8bbe\u7f6e\u7ed1\u5b9aIP\uff0c\u9002\u7528\u591aIP\u4e3b\u673a\uff08\u8def\u7531\u5668\u5c31\u6709\u591a\u4e2aIP\uff09 ServerSocket()throws IOException :\u914d\u5408bind()\u65b9\u6cd5\u4f7f\u7528\uff0cServerSocket()->setting->bind()\uff0c\u4e00\u65e6\u7ed1\u5b9a\u65e0\u6cd5\u66f4\u6539\u914d\u7f6e \u8bbe\u7f6e\u53c2\u6570 setReceiveBufferSize (int size) :\u8bbe\u7f6e\u63a5\u53d7\u7684socket\u7684\u63a5\u53d7\u7f13\u51b2\u533a\u7684\u5927\u5c0f,\u9ed8\u8ba464KB setSoTimeout(timeout) :\u8bbe\u7f6e\u963b\u585e\u64cd\u4f5c\u8d85\u65f6\u65f6\u95f4\uff0c\u5355\u4f4dms\uff0caccept()\u4e4b\u524d\u8bbe\u7f6e\u6709\u6548\uff0c\u8d85\u8fc7\u6b64\u65f6\u95f4\u629b\u51fa\u5f02\u5e38\uff0c\u4f46\u53ef\u4ee5\u7ee7\u7eed\u518d\u6b21\u7b49\u5f85\u63a5\u53d7\u8bf7\u6c42 setReuseAddress(boolean on) \u539f\u7406\u540csocket\u7684\u6b64\u65b9\u6cd5\uff0c\u907f\u514d\u7aef\u53e3\u5360\u7528\uff0c\u6d4b\u8bd5\u65f6\u4e0d\u5f00\u542f\u4f3c\u4e4e\u4e5f\u53ef\u4ee5\u7acb\u5373\u590d\u7528\u7aef\u53e3\u3002 setPerformancePreferences(int connectionTime,int latency,int bandwidth) :(\u8fde\u63a5\u65f6\u95f4\u77ed\uff0c\u5ef6\u8fdf\u4f4e\uff0c\u5e26\u5bbd\u9ad8)(10,1,1)(1,10,1)(1,1,10)\u3002\u8bbe\u7f6e\u6027\u80fd\u6743\u91cd\uff0c\u5e26\u5bbd\u5ef6\u8fdf\u4e92\u65a5\u3002 Socket \u53c2\u6570\u8bbe\u7f6e setSoTimeout(timeout) :\u8bbe\u7f6e\u963b\u585e\u64cd\u4f5c\u8d85\u65f6\u65f6\u95f4\uff0c\u5355\u4f4dms\uff0cInputstreanm\u7684read()\u4e4b\u524d\u8bbe\u7f6e\u6709\u6548\uff0c\u8d85\u8fc7\u65f6\u95f4\u6ca1\u6709\u63a5\u53d7\u5230\u6570\u636e\u5c06\u4f1a\u629b\u51fa SocketTimeoutException:read time out \u5f02\u5e38\uff0c\u4f46\u4e0d\u4f1a\u5173\u95edsocket\uff08\u53ef\u4ee5\u91cd\u65b0\u83b7\u53d6\u6d41\u8bfb\u53d6\u6570\u636e\uff09\u3002 setReuseAddress(boolean on) :\u7aef\u53e3\u590d\u7528\uff0c\u7aef\u53e3\u63cf\u8ff0\u7b26socket\u5931\u6548\u540e\u4f1a\u5360\u7528\u7aef\u53e3\u4e00\u6bb5\u65f6\u95f4\uff0c\u5bfc\u81f4\u540e\u7eed\u63cf\u8ff0\u7b26\u4f7f\u7528\u8be5\u7aef\u53e3\u65f6\u663e\u793a\u7aef\u53e3\u5360\u7528\u9519\u8bef\uff0c\u5f00\u542f\u540e\u53ef\u907f\u514d\u6b64\u7c7b\u60c5\u51b5\u3002 setPerformancePreferences(int connectionTime,int latency,int bandwidth) :(\u8fde\u63a5\u65f6\u95f4\u77ed\uff0c\u5ef6\u8fdf\u4f4e\uff0c\u5e26\u5bbd\u9ad8)(10,1,1)(1,10,1)(1,1,10)\u3002\u8bbe\u7f6e\u6027\u80fd\u6743\u91cd\uff0c\u5e26\u5bbd\u5ef6\u8fdf\u4e92\u65a5\u3002 setKeepAlive(boolean on) :socket\u8fde\u63a5\u5173\u95ed\u9700\u8981\u5176\u4e2d\u4e00\u65b9\u901a\u77e5\u5bf9\u65b9\u540e\u91ca\u653e\u5185\u5b58\uff0c\u5982\u679c\u5176\u4e2d\u4e00\u65b9\u5b95\u673a\uff0c\u53e6\u4e00\u65b9\u5c06\u56e0\u4e3a\u63a5\u53d7\u4e0d\u5230\u901a\u77e5\u4e0d\u91ca\u653e\u8d44\u6e90\uff0c\u5f00\u542f\u540e\uff0c\u672csocket\u5c06\u53d1\u9001\u5fc3\u8df3\u5305\uff0c\u76d1\u542c\u5bf9\u65b9\u662f\u5426\u5b58\u6d3b\uff0c\u5426\u5219\u81ea\u52a8\u5173\u95ed\u8fde\u63a5\u56de\u6536\u5185\u5b58\u3002 setTcpNoDelay(boolean on) :\u5f00\u542f\u5173\u95edNagle\u7b97\u6cd5 sendUrgentData (int data) :\u53d1\u9001\u7d27\u6025\u6570\u636e\uff0cint\u7c7b\u578b\u7b2c\u4e00\u4e2a\u5b57\u8282\u6709\u6548 setOOBInline(boolean on) :\u5f00\u542f\u53d1\u9001\u7d27\u6025\u6570\u636e setSoLinger(boolean,int) :\u63a7\u5236closed()\u7f51\u5361\u884c\u4e3a setTrafficClass(int tc) :type-of-service in the IP header","title":"Socket\u539f\u7406"},{"location":"java/net/socket/#socket","text":"\u6b64\u680f\u76ee\u6587\u7ae0\u9700\u914d\u5408LearningNote\u6f14\u793a\u4ee3\u7801","title":"Socket\u539f\u7406"},{"location":"java/net/socket/#socket-api","text":"","title":"Socket API"},{"location":"java/net/socket/#serversocket","text":"","title":"ServerSocket"},{"location":"java/net/socket/#_1","text":"ServerSocket(int port) throws IOException :\u6700\u5e38\u7528\u7684\u5b9e\u73b0\uff0c\u7ed1\u5b9a\u6307\u5b9a\u7aef\u53e3 ServerSocket(int port, int backlog) throws IOException :TCP\u8bf7\u6c42->\u5165\u961f->\u64cd\u4f5c\u7cfb\u7edf\u63a5\u53d7\u961f\u5217->accept()->\u51fa\u961f\uff0cbacklog\u8bbe\u7f6e\u961f\u5217\u957f\u5ea6 ServerSocket(int port, int backlog, InetAddress bindAddr) :bindAddr\u8bbe\u7f6e\u7ed1\u5b9aIP\uff0c\u9002\u7528\u591aIP\u4e3b\u673a\uff08\u8def\u7531\u5668\u5c31\u6709\u591a\u4e2aIP\uff09 ServerSocket()throws IOException :\u914d\u5408bind()\u65b9\u6cd5\u4f7f\u7528\uff0cServerSocket()->setting->bind()\uff0c\u4e00\u65e6\u7ed1\u5b9a\u65e0\u6cd5\u66f4\u6539\u914d\u7f6e","title":"\u6784\u9020\u5668"},{"location":"java/net/socket/#_2","text":"setReceiveBufferSize (int size) :\u8bbe\u7f6e\u63a5\u53d7\u7684socket\u7684\u63a5\u53d7\u7f13\u51b2\u533a\u7684\u5927\u5c0f,\u9ed8\u8ba464KB setSoTimeout(timeout) :\u8bbe\u7f6e\u963b\u585e\u64cd\u4f5c\u8d85\u65f6\u65f6\u95f4\uff0c\u5355\u4f4dms\uff0caccept()\u4e4b\u524d\u8bbe\u7f6e\u6709\u6548\uff0c\u8d85\u8fc7\u6b64\u65f6\u95f4\u629b\u51fa\u5f02\u5e38\uff0c\u4f46\u53ef\u4ee5\u7ee7\u7eed\u518d\u6b21\u7b49\u5f85\u63a5\u53d7\u8bf7\u6c42 setReuseAddress(boolean on) \u539f\u7406\u540csocket\u7684\u6b64\u65b9\u6cd5\uff0c\u907f\u514d\u7aef\u53e3\u5360\u7528\uff0c\u6d4b\u8bd5\u65f6\u4e0d\u5f00\u542f\u4f3c\u4e4e\u4e5f\u53ef\u4ee5\u7acb\u5373\u590d\u7528\u7aef\u53e3\u3002 setPerformancePreferences(int connectionTime,int latency,int bandwidth) :(\u8fde\u63a5\u65f6\u95f4\u77ed\uff0c\u5ef6\u8fdf\u4f4e\uff0c\u5e26\u5bbd\u9ad8)(10,1,1)(1,10,1)(1,1,10)\u3002\u8bbe\u7f6e\u6027\u80fd\u6743\u91cd\uff0c\u5e26\u5bbd\u5ef6\u8fdf\u4e92\u65a5\u3002","title":"\u8bbe\u7f6e\u53c2\u6570"},{"location":"java/net/socket/#socket_1","text":"","title":"Socket"},{"location":"java/net/socket/#_3","text":"setSoTimeout(timeout) :\u8bbe\u7f6e\u963b\u585e\u64cd\u4f5c\u8d85\u65f6\u65f6\u95f4\uff0c\u5355\u4f4dms\uff0cInputstreanm\u7684read()\u4e4b\u524d\u8bbe\u7f6e\u6709\u6548\uff0c\u8d85\u8fc7\u65f6\u95f4\u6ca1\u6709\u63a5\u53d7\u5230\u6570\u636e\u5c06\u4f1a\u629b\u51fa SocketTimeoutException:read time out \u5f02\u5e38\uff0c\u4f46\u4e0d\u4f1a\u5173\u95edsocket\uff08\u53ef\u4ee5\u91cd\u65b0\u83b7\u53d6\u6d41\u8bfb\u53d6\u6570\u636e\uff09\u3002 setReuseAddress(boolean on) :\u7aef\u53e3\u590d\u7528\uff0c\u7aef\u53e3\u63cf\u8ff0\u7b26socket\u5931\u6548\u540e\u4f1a\u5360\u7528\u7aef\u53e3\u4e00\u6bb5\u65f6\u95f4\uff0c\u5bfc\u81f4\u540e\u7eed\u63cf\u8ff0\u7b26\u4f7f\u7528\u8be5\u7aef\u53e3\u65f6\u663e\u793a\u7aef\u53e3\u5360\u7528\u9519\u8bef\uff0c\u5f00\u542f\u540e\u53ef\u907f\u514d\u6b64\u7c7b\u60c5\u51b5\u3002 setPerformancePreferences(int connectionTime,int latency,int bandwidth) :(\u8fde\u63a5\u65f6\u95f4\u77ed\uff0c\u5ef6\u8fdf\u4f4e\uff0c\u5e26\u5bbd\u9ad8)(10,1,1)(1,10,1)(1,1,10)\u3002\u8bbe\u7f6e\u6027\u80fd\u6743\u91cd\uff0c\u5e26\u5bbd\u5ef6\u8fdf\u4e92\u65a5\u3002 setKeepAlive(boolean on) :socket\u8fde\u63a5\u5173\u95ed\u9700\u8981\u5176\u4e2d\u4e00\u65b9\u901a\u77e5\u5bf9\u65b9\u540e\u91ca\u653e\u5185\u5b58\uff0c\u5982\u679c\u5176\u4e2d\u4e00\u65b9\u5b95\u673a\uff0c\u53e6\u4e00\u65b9\u5c06\u56e0\u4e3a\u63a5\u53d7\u4e0d\u5230\u901a\u77e5\u4e0d\u91ca\u653e\u8d44\u6e90\uff0c\u5f00\u542f\u540e\uff0c\u672csocket\u5c06\u53d1\u9001\u5fc3\u8df3\u5305\uff0c\u76d1\u542c\u5bf9\u65b9\u662f\u5426\u5b58\u6d3b\uff0c\u5426\u5219\u81ea\u52a8\u5173\u95ed\u8fde\u63a5\u56de\u6536\u5185\u5b58\u3002 setTcpNoDelay(boolean on) :\u5f00\u542f\u5173\u95edNagle\u7b97\u6cd5 sendUrgentData (int data) :\u53d1\u9001\u7d27\u6025\u6570\u636e\uff0cint\u7c7b\u578b\u7b2c\u4e00\u4e2a\u5b57\u8282\u6709\u6548 setOOBInline(boolean on) :\u5f00\u542f\u53d1\u9001\u7d27\u6025\u6570\u636e setSoLinger(boolean,int) :\u63a7\u5236closed()\u7f51\u5361\u884c\u4e3a setTrafficClass(int tc) :type-of-service in the IP header","title":"\u53c2\u6570\u8bbe\u7f6e"},{"location":"java/theory/concurrent/","text":"\u5e76\u53d1\u76f8\u5173\u7406\u8bba \u9501 \u9501\u540d\u79f0 \u601d\u60f3 \u5e94\u7528\u573a\u666f \u60b2\u89c2\u9501 \u60b2\u89c2\u9501\u4e0d\u5141\u8bb8\u5728\u83b7\u5f97\u8d44 \u6e90\u64cd\u4f5c\u673a\u4f1a\u540e\u88ab\u5176\u4ed6\u7ebf\u7a0b\u62a2\u8d70\u673a\u4f1a \u4e50\u89c2\u9501 \u4e50\u89c2\u9501\u5141\u8bb8\u5728\u83b7\u5f97\u8d44\u6e90\u673a\u4f1a\u524d\u88ab\u5176\u4ed6\u7ebf\u7a0b\u62a2\u8d70\u673a\u4f1a \u60b2\u89c2\u9501\u672c\u8d28\u662f\u901a\u8fc7\u4fe1\u53f7\u91cf\u673a\u5236\u5b9e\u73b0\u7ebf\u7a0b\u5bf9\u8d44\u6e90\u7684\u72ec\u5360\u6027 \u4e50\u89c2\u9501\u672c\u8d28\u662f\u901a\u8fc7\u6bd4\u8f83\u653e\u5f03\u5b9e\u73b0\u591a\u4e2a\u7ebf\u7a0b\u5bf9\u8d44\u6e90\u64cd\u4f5c\u7684\u8fde\u7eed\u6027 CAS\u7406\u8bba","title":"\u5e76\u53d1\u76f8\u5173"},{"location":"java/theory/concurrent/#_1","text":"","title":"\u5e76\u53d1\u76f8\u5173\u7406\u8bba"},{"location":"java/theory/concurrent/#_2","text":"\u9501\u540d\u79f0 \u601d\u60f3 \u5e94\u7528\u573a\u666f \u60b2\u89c2\u9501 \u60b2\u89c2\u9501\u4e0d\u5141\u8bb8\u5728\u83b7\u5f97\u8d44 \u6e90\u64cd\u4f5c\u673a\u4f1a\u540e\u88ab\u5176\u4ed6\u7ebf\u7a0b\u62a2\u8d70\u673a\u4f1a \u4e50\u89c2\u9501 \u4e50\u89c2\u9501\u5141\u8bb8\u5728\u83b7\u5f97\u8d44\u6e90\u673a\u4f1a\u524d\u88ab\u5176\u4ed6\u7ebf\u7a0b\u62a2\u8d70\u673a\u4f1a \u60b2\u89c2\u9501\u672c\u8d28\u662f\u901a\u8fc7\u4fe1\u53f7\u91cf\u673a\u5236\u5b9e\u73b0\u7ebf\u7a0b\u5bf9\u8d44\u6e90\u7684\u72ec\u5360\u6027 \u4e50\u89c2\u9501\u672c\u8d28\u662f\u901a\u8fc7\u6bd4\u8f83\u653e\u5f03\u5b9e\u73b0\u591a\u4e2a\u7ebf\u7a0b\u5bf9\u8d44\u6e90\u64cd\u4f5c\u7684\u8fde\u7eed\u6027","title":"\u9501"},{"location":"java/theory/concurrent/#cas","text":"","title":"CAS\u7406\u8bba"},{"location":"java/theory/os/","text":"\u64cd\u4f5c\u7cfb\u7edf\u673a\u5236 LINUX-COW(copy-on-write)\u673a\u5236\uff1a\u8fdb\u7a0b fork() :\u8fdb\u7a0b\u8c03\u7528\u6b64\u51fd\u6570\u540e\u5c06\u521b\u5efa\u81ea\u8eab\u7684\u526f\u672c\u5b50\u8fdb\u7a0b\uff08\u4ec5pid\u4e0d\u540c\uff09\uff0c\u8be5\u51fd\u6570\u5177\u6709\u4e24\u6b21\u8fd4\u56de\uff0c\u8fd4\u56de\u5b50\u8fdb\u7a0bpid\u7ed9\u7236\u8fdb\u7a0b\uff0c\u8fd4\u56de0\u7ed9\u5b50\u8fdb\u7a0b\u3002 exec() :\u5b50\u8fdb\u7a0b\u8c03\u7528\u540e\u88c5\u8f7d\u53ef\u6267\u884c\u6620\u50cf\u66ff\u6362\u526f\u672c\u6620\u50cf\u4ee5\u5b8c\u6210\u7279\u5b9a\u7684\u5b50\u8fdb\u7a0b\u4efb\u52a1\uff08\u76f4\u63a5\u66ff\u6362\u5730\u5740\u7a7a\u95f4\uff09\u3002 \u5728\u4f20\u7edffork()\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u521b\u5efa\u5b50\u8fdb\u7a0b\u8fc7\u7a0b\u4e3a\uff1a \u4e3a\u5b50\u8fdb\u7a0b\u5206\u914d\u7a7a\u95f2\u5185\u5b58->\u62f7\u8d1d\u7236\u8fdb\u7a0b\u7684\u6570\u636e\u6bb5\u3001\u5806\u6808\u6bb5\u81f3\u5206\u914d\u5185\u5b58->\u521b\u5efa\u5b50\u8fdb\u7a0b\u5b8c\u6bd5 \uff1b\u5f15\u5165COW\u673a\u5236\u540e\uff1a \u5b50\u8fdb\u7a0b\u5f15\u7528\u7236\u8fdb\u7a0b\u7684\u4ee3\u7801\u6bb5\u3001\u6570\u636e\u6bb5\u3001\u5806\u6808\u6bb5->\u5c06\u7236\u8fdb\u7a0b\u6240\u6709\u5185\u5b58\u9875\u8bbe\u4e3a\u53ea\u8bfb->\u521b\u5efa\u5b50\u8fdb\u7a0b\u5b8c\u6bd5 \u3002\u5982\u679c\u5b50\u8fdb\u7a0bfork()\u540e\u7acb\u5373exec()\uff0c\u5219\u8282\u7ea6\u4e86\u62f7\u8d1d\u7236\u8fdb\u7a0b \u6570\u636e\u6bb5\u3001\u5806\u6808\u6bb5\u7684\u65f6\u95f4\uff1b\u5982\u679cfork()\u540e\u4e0d\u6267\u884cexec()\u4e14\u53d1\u751f\u5185\u5b58\u7684\u5199\u64cd\u4f5c\uff0c\u5219\u89e6\u53d1\u9875\u5f02\u5e38\u4e2d\u65ad\uff0c\u7531\u64cd\u4f5c\u7cfb\u7edf\u590d\u5236\u5f02\u5e38\u9875\u4f9b\u5199\u5165\u8fdb\u7a0b\u5199\uff0c\u5176\u4ed6\u9875\u4f9d\u7136\u4e3a\u5171\u4eab\u53ea\u8bfb\u3002 \u7b80\u5355\u8bb2\uff0c\u4e0d\u540c\u7684\u8fdb\u7a0b\uff08\u5305\u62ec\u7236\u4e0e\u5b50\uff09\u5e94\u8be5\u6301\u6709\u7269\u7406\u5730\u5740\u65e0\u5173\u7684\u6570\u636e\u6bb5\u3001\u5806\u6808\u6bb5\uff0c\u4ee3\u7801\u6bb5\uff0cCOW\u5c06\u521b\u5efa\u6539\u4e3a\u5f15\u7528\u4ece\u800c\u52a0\u901f\u8fdb\u7a0b\u7684\u521b\u5efa\uff0c\u7136\u540e\u901a\u8fc7\u5f02\u5e38\u5904\u7406\u5b9e\u73b0 \u61d2\u52a0\u8f7d\u7684\u6548\u679c\u3002 COW\u673a\u5236\uff1a\u6587\u4ef6\u7cfb\u7edf \u6587\u4ef6\uff08\u786c\u76d8\uff09\u53d1\u751f\u5199\u64cd\u4f5c\u65f6\u5019\uff0c\u5c06\u590d\u5236\u5bf9\u5e94\u6570\u636e\u81f3\u5176\u4ed6\u4f4d\u7f6e\u518d\u4fee\u6539\uff0c\u5982\u679c\u6b64\u65f6\u8ba1\u7b97\u673a\u6389\u7535\uff0c\u539f\u59cb\u6570\u636e\u53ef\u4ee5\u88ab\u6062\u590d\uff0c\u4ece\u800c\u4fdd\u8bc1\u6570\u636e\u7684\u5b8c\u6574\u6027\u3002","title":"\u64cd\u4f5c\u7cfb\u7edf\u76f8\u5173"},{"location":"java/theory/os/#_1","text":"","title":"\u64cd\u4f5c\u7cfb\u7edf\u673a\u5236"},{"location":"java/theory/os/#linux-cowcopy-on-write","text":"fork() :\u8fdb\u7a0b\u8c03\u7528\u6b64\u51fd\u6570\u540e\u5c06\u521b\u5efa\u81ea\u8eab\u7684\u526f\u672c\u5b50\u8fdb\u7a0b\uff08\u4ec5pid\u4e0d\u540c\uff09\uff0c\u8be5\u51fd\u6570\u5177\u6709\u4e24\u6b21\u8fd4\u56de\uff0c\u8fd4\u56de\u5b50\u8fdb\u7a0bpid\u7ed9\u7236\u8fdb\u7a0b\uff0c\u8fd4\u56de0\u7ed9\u5b50\u8fdb\u7a0b\u3002 exec() :\u5b50\u8fdb\u7a0b\u8c03\u7528\u540e\u88c5\u8f7d\u53ef\u6267\u884c\u6620\u50cf\u66ff\u6362\u526f\u672c\u6620\u50cf\u4ee5\u5b8c\u6210\u7279\u5b9a\u7684\u5b50\u8fdb\u7a0b\u4efb\u52a1\uff08\u76f4\u63a5\u66ff\u6362\u5730\u5740\u7a7a\u95f4\uff09\u3002 \u5728\u4f20\u7edffork()\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u521b\u5efa\u5b50\u8fdb\u7a0b\u8fc7\u7a0b\u4e3a\uff1a \u4e3a\u5b50\u8fdb\u7a0b\u5206\u914d\u7a7a\u95f2\u5185\u5b58->\u62f7\u8d1d\u7236\u8fdb\u7a0b\u7684\u6570\u636e\u6bb5\u3001\u5806\u6808\u6bb5\u81f3\u5206\u914d\u5185\u5b58->\u521b\u5efa\u5b50\u8fdb\u7a0b\u5b8c\u6bd5 \uff1b\u5f15\u5165COW\u673a\u5236\u540e\uff1a \u5b50\u8fdb\u7a0b\u5f15\u7528\u7236\u8fdb\u7a0b\u7684\u4ee3\u7801\u6bb5\u3001\u6570\u636e\u6bb5\u3001\u5806\u6808\u6bb5->\u5c06\u7236\u8fdb\u7a0b\u6240\u6709\u5185\u5b58\u9875\u8bbe\u4e3a\u53ea\u8bfb->\u521b\u5efa\u5b50\u8fdb\u7a0b\u5b8c\u6bd5 \u3002\u5982\u679c\u5b50\u8fdb\u7a0bfork()\u540e\u7acb\u5373exec()\uff0c\u5219\u8282\u7ea6\u4e86\u62f7\u8d1d\u7236\u8fdb\u7a0b \u6570\u636e\u6bb5\u3001\u5806\u6808\u6bb5\u7684\u65f6\u95f4\uff1b\u5982\u679cfork()\u540e\u4e0d\u6267\u884cexec()\u4e14\u53d1\u751f\u5185\u5b58\u7684\u5199\u64cd\u4f5c\uff0c\u5219\u89e6\u53d1\u9875\u5f02\u5e38\u4e2d\u65ad\uff0c\u7531\u64cd\u4f5c\u7cfb\u7edf\u590d\u5236\u5f02\u5e38\u9875\u4f9b\u5199\u5165\u8fdb\u7a0b\u5199\uff0c\u5176\u4ed6\u9875\u4f9d\u7136\u4e3a\u5171\u4eab\u53ea\u8bfb\u3002 \u7b80\u5355\u8bb2\uff0c\u4e0d\u540c\u7684\u8fdb\u7a0b\uff08\u5305\u62ec\u7236\u4e0e\u5b50\uff09\u5e94\u8be5\u6301\u6709\u7269\u7406\u5730\u5740\u65e0\u5173\u7684\u6570\u636e\u6bb5\u3001\u5806\u6808\u6bb5\uff0c\u4ee3\u7801\u6bb5\uff0cCOW\u5c06\u521b\u5efa\u6539\u4e3a\u5f15\u7528\u4ece\u800c\u52a0\u901f\u8fdb\u7a0b\u7684\u521b\u5efa\uff0c\u7136\u540e\u901a\u8fc7\u5f02\u5e38\u5904\u7406\u5b9e\u73b0 \u61d2\u52a0\u8f7d\u7684\u6548\u679c\u3002","title":"LINUX-COW(copy-on-write)\u673a\u5236\uff1a\u8fdb\u7a0b"},{"location":"java/theory/os/#cow","text":"\u6587\u4ef6\uff08\u786c\u76d8\uff09\u53d1\u751f\u5199\u64cd\u4f5c\u65f6\u5019\uff0c\u5c06\u590d\u5236\u5bf9\u5e94\u6570\u636e\u81f3\u5176\u4ed6\u4f4d\u7f6e\u518d\u4fee\u6539\uff0c\u5982\u679c\u6b64\u65f6\u8ba1\u7b97\u673a\u6389\u7535\uff0c\u539f\u59cb\u6570\u636e\u53ef\u4ee5\u88ab\u6062\u590d\uff0c\u4ece\u800c\u4fdd\u8bc1\u6570\u636e\u7684\u5b8c\u6574\u6027\u3002","title":"COW\u673a\u5236\uff1a\u6587\u4ef6\u7cfb\u7edf"},{"location":"java/tools/maven/","text":"Maven command maven-4.0.0.xsd","title":"Maven"},{"location":"java/tools/maven/#maven","text":"","title":"Maven"},{"location":"java/tools/maven/#command","text":"","title":"command"},{"location":"java/tools/maven/#maven-400xsd","text":"","title":"maven-4.0.0.xsd"},{"location":"jvm/arguments/","text":"JVM\u53c2\u6570\u8bbe\u7f6e \u6807\u51c6\u53c2\u6570 java -help : -\u5f00\u5934\u53c2\u6570 -X\u53c2\u6570 java -X : -X\u5f00\u5934\u53c2\u6570 Name Description Example -Xint \u4ec5\u89e3\u91ca\u5668\u6267\u884c -Xcomp \u4ec5\u7f16\u8bd1\u5668\u6267\u884c -Xmixed \u89e3\u91ca\u5668\u7f16\u8bd1\u5668\u6df7\u5408\u6267\u884c -Xms[size] \u8bbe\u7f6e\u521d\u59cb\u5806\u5927\u5c0f -Xms100m -Xmx[size] \u8bbe\u7f6e\u6700\u5927\u5806\u5927\u5c0f -Xmx150m -Xss[size] \u8bbe\u7f6e\u7ebf\u7a0b\u65b9\u6cd5\u6808\u5927\u5c0f -Xss5m -Xmn[size] \u8bbe\u7f6e\u5e74\u8f7b\u4ee3\u521d\u59cb\u548c\u6700\u5927\u5806\u5927\u5c0f -Xmn50m -Xloggc:[file] \u5c06gc\u72b6\u6001\u8bb0\u5f55\u81f3\u6587\u4ef6\uff08\u5e26\u65f6\u95f4\u6233\uff09 -XX\u53c2\u6570 java -XX:+PrintFlagsFinal : -XX\u5f00\u5934\u53c2\u6570","title":"\u53c2\u6570\u8bbe\u7f6e"},{"location":"jvm/arguments/#jvm","text":"","title":"JVM\u53c2\u6570\u8bbe\u7f6e"},{"location":"jvm/arguments/#_1","text":"java -help : -\u5f00\u5934\u53c2\u6570","title":"\u6807\u51c6\u53c2\u6570"},{"location":"jvm/arguments/#-x","text":"java -X : -X\u5f00\u5934\u53c2\u6570 Name Description Example -Xint \u4ec5\u89e3\u91ca\u5668\u6267\u884c -Xcomp \u4ec5\u7f16\u8bd1\u5668\u6267\u884c -Xmixed \u89e3\u91ca\u5668\u7f16\u8bd1\u5668\u6df7\u5408\u6267\u884c -Xms[size] \u8bbe\u7f6e\u521d\u59cb\u5806\u5927\u5c0f -Xms100m -Xmx[size] \u8bbe\u7f6e\u6700\u5927\u5806\u5927\u5c0f -Xmx150m -Xss[size] \u8bbe\u7f6e\u7ebf\u7a0b\u65b9\u6cd5\u6808\u5927\u5c0f -Xss5m -Xmn[size] \u8bbe\u7f6e\u5e74\u8f7b\u4ee3\u521d\u59cb\u548c\u6700\u5927\u5806\u5927\u5c0f -Xmn50m -Xloggc:[file] \u5c06gc\u72b6\u6001\u8bb0\u5f55\u81f3\u6587\u4ef6\uff08\u5e26\u65f6\u95f4\u6233\uff09","title":"-X\u53c2\u6570"},{"location":"jvm/arguments/#-xx","text":"java -XX:+PrintFlagsFinal : -XX\u5f00\u5934\u53c2\u6570","title":"-XX\u53c2\u6570"},{"location":"jvm/classmanage/","text":"JVM\u7c7b\u7ba1\u7406 \u7c7b\u7684\u751f\u547d\u5468\u671f flowchart LR 1[Loading]-->2; subgraph Linking 2[Verification]-->3[Preparation];3-->4[Resolution]; end 4-->5;5[Initialization]-->6;6[Using]-->7[Unloading]; Loading is the process of reading .class text into memory by various approaches as follows: Computer File System .jar .zip .etc Database Network like HTTP Runtime Generation Verification","title":"\u7c7b\u7ba1\u7406"},{"location":"jvm/classmanage/#jvm","text":"","title":"JVM\u7c7b\u7ba1\u7406"},{"location":"jvm/classmanage/#_1","text":"flowchart LR 1[Loading]-->2; subgraph Linking 2[Verification]-->3[Preparation];3-->4[Resolution]; end 4-->5;5[Initialization]-->6;6[Using]-->7[Unloading]; Loading is the process of reading .class text into memory by various approaches as follows: Computer File System .jar .zip .etc Database Network like HTTP Runtime Generation Verification","title":"\u7c7b\u7684\u751f\u547d\u5468\u671f"},{"location":"jvm/instructions/","text":"JVM\u6307\u4ee4\u96c6 \u5355\u5b57\u8282\u6307\u4ee4 \u603b\u8ba1197\u6761\u6307\u4ee4 []\u4ee3\u8868\u53c2\u6570\u4f4d\u6570 \u6307\u4ee4\u5217\u8868\uff1a\u52a0\u8f7d\u5b58\u50a8 1 2 3 4 5 iload [8] lload [8] fload [8] dload [8] aload [8] iload_0 lload_0 fload_0 dload_0 aload_0 iload_1 lload_1 fload_1 dload_1 aload_1 iload_2 lload_2 fload_2 dload_2 aload_2 iload_3 lload_3 fload_3 dload_3 aload_3 iconst_m1 iconst_0 iconst_1 iconst_2 iconst_3 iconst_4 iconst_5 lconst_0 lconst_1 fconst_0 fconst_1 fconst_2 dconst_0 dconst_1 aconst_null bipush [8] sipush [16] ldc [8] ldc_w [16] ldc2_w [16] istore [8] lstore [8] fstore [8] dstore [8] astore [8] istore_0 lstore_0 fstore_0 dstore_0 astore_0 istore_1 lstore_1 fstore_1 dstore_1 astore_1 istore_2 lstore_2 fstore_2 dstore_2 astore_2 istore_3 lstore_3 fstore_3 dstore_3 astore_3 \u6307\u4ee4\u5217\u8868\uff1a\u7b97\u672f 1 2 3 4 5 iadd ladd fadd dadd isub lsub fsub dsub imul lmul fmul dmul idiv ldiv fdiv ddiv irem lrem frem drem ineg lneg fneg dneg iinc ishl ishr iand ior ixor lshl lshr land lor lxor iushr lushr dcmpg dcmpl fcmpg lcmp \u6307\u4ee4\u5217\u8868\uff1a\u7c7b\u578b\u8f6c\u5316 1 2 3 4 5 i2l i2f i2d l2f l2d f2d i2b i2c i2s d2i d2f d2l f2i f2l l2i \u6307\u4ee4\u5217\u8868\uff1a\u5bf9\u8c61\u64cd\u4f5c 1 2 3 4 5 new [] newarray anewarray multianewarray getstatic putstatic getfield putfield baload caload saload iaload laload faload daload aaload bastore castore sastore iastore lastore fastore dastore aastore arraylength instanceof checkcast \u6307\u4ee4\u5217\u8868\uff1a\u65b9\u6cd5\u8c03\u7528\u8fd4\u56de 1 2 3 4 5 invokevirtual invokeinterface invokespecial invokestatic invokedynamic ireturn lreturn freturn dreturn areturn return \u6307\u4ee4\u5217\u8868\uff1a\u64cd\u4f5c\u6808\u7ba1\u7406 1 2 3 4 5 pop pop2 dup dup2 dup_x1 dup_x2 dup2_x1 dup2_x2 swap nop \u6307\u4ee4\u5217\u8868\uff1a\u7a0b\u5e8f\u8df3\u8f6c 1 2 3 4 5 ifeq [16] ifne [16] iflt [16] ifle [16] ifgt [16] ifge [16] ifnull [16] ifnonnull [16] if_icmpeq [16] if_icmpne [16] if_icmplt [16] if_icmple [16] if_icmpgt [16] if_icmpge [16] if_acmpeq [16] if_acmpne [16] tableswitch lookupswitch goto goto_w \u6307\u4ee4\u5217\u8868\uff1a\u5f02\u5e38&\u540c\u6b65 1 2 3 4 5 athrow monitorenter monitorexit \u6307\u4ee4\u5b9e\u4f8b\uff1a\u7b97\u672f 1 2 3 0 bipush 15 2 istore_1 3 return 1 2 3 4 5 6 7 8 9 10 11 0 iconst_2 1 istore_1 2 iconst_2 3 istore_2 4 iconst_3 5 istore_3 6 bipush 6 8 istore 4 10 bipush 7 12 istore 5 14 return \u6bd4\u8f83\u4e0a\u9762\u4e24\u5f20.class\u6587\u4ef6\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u53ef\u77e5\uff0c\u5b57\u8282 10 \u4ee3\u8868 bipush \uff0c\u6570\u503c 6 \u5360\u7528\u4e00\u4e2a\u5b57\u8282\uff1b 36 \u4ee3\u8868 istore ,\u6570\u503c 4 \u5360\u7528\u4e00\u4e2a\u5b57\u8282\uff1b B1 \u4ee3\u8868 return \u3002\u95ee\u9898\u662f\uff0c\u5b57\u8282\u7801\u600e\u4e48\u77e5\u9053\u54ea\u4e9b\u662f \u6307\u4ee4\u54ea\u4e9b\u662f\u6570\u503c\uff1f\u8fdb\u4e00\u6b65\u5206\u6790\uff0c\u5728\u4ee3\u7801\u524d\u9762\u6709\u7740\u56fa\u5b9a\u7684\u5e8f\u5217: 00 01 00 xx 00 00 00 xx ; \u5728\u4ee3\u7801\u540e\u9762\u6709\u7740\u56fa\u5b9a\u7684\u5e8f\u5217 00 00 00 xx 00 xx 00 00 00 \u3002\u7531\u6b64\u53ef\u4ee5\u5b9a\u4f4d\u4ee3\u7801\u6bb5\u5728\u5b57\u8282\u7801\u6587\u4ef6 \u4e2d\u7684\u4f4d\u7f6e\u3002 1 2 3 4 5 public static void main ( String [] args ) { Integer x = 5 ; int y = 5 ; System . out . print ( x == y ); } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 0 iconst_5 1 invokestatic # 2 < java / lang / Integer . valueOf : ( I ) Ljava / lang / Integer ; > 4 astore_1 5 iconst_5 6 istore_2 7 getstatic # 3 < java / lang / System . out : Ljava / io / PrintStream ; > 10 aload_1 11 invokevirtual # 4 < java / lang / Integer . intValue : () I > 14 iload_2 15 if_icmpne 22 ( + 7 ) 18 iconst_1 19 goto 23 ( + 4 ) 22 iconst_0 23 invokevirtual # 5 < java / io / PrintStream . print : ( Z ) V > 26 return","title":"\u6307\u4ee4\u96c6"},{"location":"jvm/instructions/#jvm","text":"\u5355\u5b57\u8282\u6307\u4ee4 \u603b\u8ba1197\u6761\u6307\u4ee4 []\u4ee3\u8868\u53c2\u6570\u4f4d\u6570","title":"JVM\u6307\u4ee4\u96c6"},{"location":"jvm/instructions/#_1","text":"1 2 3 4 5 iload [8] lload [8] fload [8] dload [8] aload [8] iload_0 lload_0 fload_0 dload_0 aload_0 iload_1 lload_1 fload_1 dload_1 aload_1 iload_2 lload_2 fload_2 dload_2 aload_2 iload_3 lload_3 fload_3 dload_3 aload_3 iconst_m1 iconst_0 iconst_1 iconst_2 iconst_3 iconst_4 iconst_5 lconst_0 lconst_1 fconst_0 fconst_1 fconst_2 dconst_0 dconst_1 aconst_null bipush [8] sipush [16] ldc [8] ldc_w [16] ldc2_w [16] istore [8] lstore [8] fstore [8] dstore [8] astore [8] istore_0 lstore_0 fstore_0 dstore_0 astore_0 istore_1 lstore_1 fstore_1 dstore_1 astore_1 istore_2 lstore_2 fstore_2 dstore_2 astore_2 istore_3 lstore_3 fstore_3 dstore_3 astore_3","title":"\u6307\u4ee4\u5217\u8868\uff1a\u52a0\u8f7d\u5b58\u50a8"},{"location":"jvm/instructions/#_2","text":"1 2 3 4 5 iadd ladd fadd dadd isub lsub fsub dsub imul lmul fmul dmul idiv ldiv fdiv ddiv irem lrem frem drem ineg lneg fneg dneg iinc ishl ishr iand ior ixor lshl lshr land lor lxor iushr lushr dcmpg dcmpl fcmpg lcmp","title":"\u6307\u4ee4\u5217\u8868\uff1a\u7b97\u672f"},{"location":"jvm/instructions/#_3","text":"1 2 3 4 5 i2l i2f i2d l2f l2d f2d i2b i2c i2s d2i d2f d2l f2i f2l l2i","title":"\u6307\u4ee4\u5217\u8868\uff1a\u7c7b\u578b\u8f6c\u5316"},{"location":"jvm/instructions/#_4","text":"1 2 3 4 5 new [] newarray anewarray multianewarray getstatic putstatic getfield putfield baload caload saload iaload laload faload daload aaload bastore castore sastore iastore lastore fastore dastore aastore arraylength instanceof checkcast","title":"\u6307\u4ee4\u5217\u8868\uff1a\u5bf9\u8c61\u64cd\u4f5c"},{"location":"jvm/instructions/#_5","text":"1 2 3 4 5 invokevirtual invokeinterface invokespecial invokestatic invokedynamic ireturn lreturn freturn dreturn areturn return","title":"\u6307\u4ee4\u5217\u8868\uff1a\u65b9\u6cd5\u8c03\u7528\u8fd4\u56de"},{"location":"jvm/instructions/#_6","text":"1 2 3 4 5 pop pop2 dup dup2 dup_x1 dup_x2 dup2_x1 dup2_x2 swap nop","title":"\u6307\u4ee4\u5217\u8868\uff1a\u64cd\u4f5c\u6808\u7ba1\u7406"},{"location":"jvm/instructions/#_7","text":"1 2 3 4 5 ifeq [16] ifne [16] iflt [16] ifle [16] ifgt [16] ifge [16] ifnull [16] ifnonnull [16] if_icmpeq [16] if_icmpne [16] if_icmplt [16] if_icmple [16] if_icmpgt [16] if_icmpge [16] if_acmpeq [16] if_acmpne [16] tableswitch lookupswitch goto goto_w","title":"\u6307\u4ee4\u5217\u8868\uff1a\u7a0b\u5e8f\u8df3\u8f6c"},{"location":"jvm/instructions/#_8","text":"1 2 3 4 5 athrow monitorenter monitorexit","title":"\u6307\u4ee4\u5217\u8868\uff1a\u5f02\u5e38&amp;\u540c\u6b65"},{"location":"jvm/instructions/#_9","text":"1 2 3 0 bipush 15 2 istore_1 3 return 1 2 3 4 5 6 7 8 9 10 11 0 iconst_2 1 istore_1 2 iconst_2 3 istore_2 4 iconst_3 5 istore_3 6 bipush 6 8 istore 4 10 bipush 7 12 istore 5 14 return \u6bd4\u8f83\u4e0a\u9762\u4e24\u5f20.class\u6587\u4ef6\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u53ef\u77e5\uff0c\u5b57\u8282 10 \u4ee3\u8868 bipush \uff0c\u6570\u503c 6 \u5360\u7528\u4e00\u4e2a\u5b57\u8282\uff1b 36 \u4ee3\u8868 istore ,\u6570\u503c 4 \u5360\u7528\u4e00\u4e2a\u5b57\u8282\uff1b B1 \u4ee3\u8868 return \u3002\u95ee\u9898\u662f\uff0c\u5b57\u8282\u7801\u600e\u4e48\u77e5\u9053\u54ea\u4e9b\u662f \u6307\u4ee4\u54ea\u4e9b\u662f\u6570\u503c\uff1f\u8fdb\u4e00\u6b65\u5206\u6790\uff0c\u5728\u4ee3\u7801\u524d\u9762\u6709\u7740\u56fa\u5b9a\u7684\u5e8f\u5217: 00 01 00 xx 00 00 00 xx ; \u5728\u4ee3\u7801\u540e\u9762\u6709\u7740\u56fa\u5b9a\u7684\u5e8f\u5217 00 00 00 xx 00 xx 00 00 00 \u3002\u7531\u6b64\u53ef\u4ee5\u5b9a\u4f4d\u4ee3\u7801\u6bb5\u5728\u5b57\u8282\u7801\u6587\u4ef6 \u4e2d\u7684\u4f4d\u7f6e\u3002 1 2 3 4 5 public static void main ( String [] args ) { Integer x = 5 ; int y = 5 ; System . out . print ( x == y ); } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 0 iconst_5 1 invokestatic # 2 < java / lang / Integer . valueOf : ( I ) Ljava / lang / Integer ; > 4 astore_1 5 iconst_5 6 istore_2 7 getstatic # 3 < java / lang / System . out : Ljava / io / PrintStream ; > 10 aload_1 11 invokevirtual # 4 < java / lang / Integer . intValue : () I > 14 iload_2 15 if_icmpne 22 ( + 7 ) 18 iconst_1 19 goto 23 ( + 4 ) 22 iconst_0 23 invokevirtual # 5 < java / io / PrintStream . print : ( Z ) V > 26 return","title":"\u6307\u4ee4\u5b9e\u4f8b\uff1a\u7b97\u672f"},{"location":"jvm/knowledge/","text":"\u77e5\u8bc6\u8981\u70b9 \u88681\uff1a\u524d\u7aef\u7f16\u8bd1\u5668 \u540d\u79f0 \u80cc\u666f \u7f16\u8bd1\u65b9\u5f0f javac HotSpot\u9ed8\u8ba4 \u5168\u91cf\u5f0f ecj Eclipse\u5185\u7f6e \u589e\u91cf\u5f0f ajc AspectJ","title":"\u5176\u4ed6\u8981\u70b9"},{"location":"jvm/knowledge/#_1","text":"\u88681\uff1a\u524d\u7aef\u7f16\u8bd1\u5668 \u540d\u79f0 \u80cc\u666f \u7f16\u8bd1\u65b9\u5f0f javac HotSpot\u9ed8\u8ba4 \u5168\u91cf\u5f0f ecj Eclipse\u5185\u7f6e \u589e\u91cf\u5f0f ajc AspectJ","title":"\u77e5\u8bc6\u8981\u70b9"},{"location":"jvm/memomanage/","text":"JVM\u5185\u5b58\u7ba1\u7406 \u5783\u573e\u56de\u6536\u5668 \u88681\uff1a\u56de\u6536\u5668\u5206\u7c7b \u7ebf\u7a0b\u6570 \u5de5\u4f5c\u6a21\u5f0f \u788e\u7247\u5904\u7406 \u4f5c\u7528\u533a\u57df \u4e32\u884c\u5f0f \u72ec\u5360\u5f0f \u538b\u7f29\u5f0f \u5e74\u8f7b\u4ee3 \u5e76\u884c\u5f0f \u5e76\u53d1\u5f0f \u975e\u538b\u7f29\u5f0f \u8001\u5e74\u4ee3 \u88682\uff1a\u56de\u6536\u5668\u6027\u80fd\u6307\u6807 \u6682\u505c\u65f6\u95f4 \u541e\u5410\u91cf \u5806\u5185\u5b58\u6bd4\u4f8b \u5783\u573e\u6536\u96c6\u5f00\u9500 \u56de\u6536\u9891\u7387 \u56de\u6536\u901f\u5ea6 \u88683\uff1a\u5386\u53f2\u4e2d\u7684\u5783\u573e\u56de\u6536\u5668 \u540d\u79f0 \u51fa\u73b0\u80cc\u666f Serial GC 1999-JDK1.3.1 Parallel GC 2002.2.26-JDK1.4.2 Concurrent Mark Sweep GC 2002.2.26-JDK1.4.2 G1 2012-JDK1.7u4 Serial \u56de\u6536\u5668 \u590d\u5236\u7b97\u6cd5+\u4e32\u884c\u56de\u6536+\"STW\u673a\u5236\" \u5e74\u8f7b\u4ee3 Serial \u56de\u6536\u5668 \u6807\u8bb0-\u538b\u7f29\u7b97\u6cd5+\u4e32\u884c\u56de\u6536+\"STW\u673a\u5236\" \u8001\u5e74\u4ee3 ParNew \u56de\u6536\u5668 \u590d\u5236\u7b97\u6cd5+\u5e76\u884c\u56de\u6536+\"STW\u673a\u5236\" \u5e74\u8f7b\u4ee3 Parallel Scavege\u56de\u6536\u5668 \u590d\u5236\u7b97\u6cd5+\u5e76\u884c\u56de\u6536+\"STW\u673a\u5236\"+\u81ea\u9002\u5e94\u7b56\u7565+\u6700\u4f18\u541e\u5410\u91cf \u5e74\u8f7b\u4ee3 Parallel Old\u56de\u6536\u5668 \u6807\u8bb0-\u538b\u7f29+\u5e76\u884c\u56de\u6536+\"STW\u673a\u5236\" \u8001\u5e74\u4ee3 CMS\u56de\u6536\u5668 \u6807\u8bb0-\u6e05\u9664+\"STW\u673a\u5236\"+\u5e76\u53d1\u56de\u6536 \u8001\u5e74\u4ee3 C1\u56de\u6536\u5668 \u5206\u533a\u7b97\u6cd5","title":"\u5185\u5b58\u7ba1\u7406"},{"location":"jvm/memomanage/#jvm","text":"","title":"JVM\u5185\u5b58\u7ba1\u7406"},{"location":"jvm/memomanage/#_1","text":"\u88681\uff1a\u56de\u6536\u5668\u5206\u7c7b \u7ebf\u7a0b\u6570 \u5de5\u4f5c\u6a21\u5f0f \u788e\u7247\u5904\u7406 \u4f5c\u7528\u533a\u57df \u4e32\u884c\u5f0f \u72ec\u5360\u5f0f \u538b\u7f29\u5f0f \u5e74\u8f7b\u4ee3 \u5e76\u884c\u5f0f \u5e76\u53d1\u5f0f \u975e\u538b\u7f29\u5f0f \u8001\u5e74\u4ee3 \u88682\uff1a\u56de\u6536\u5668\u6027\u80fd\u6307\u6807 \u6682\u505c\u65f6\u95f4 \u541e\u5410\u91cf \u5806\u5185\u5b58\u6bd4\u4f8b \u5783\u573e\u6536\u96c6\u5f00\u9500 \u56de\u6536\u9891\u7387 \u56de\u6536\u901f\u5ea6 \u88683\uff1a\u5386\u53f2\u4e2d\u7684\u5783\u573e\u56de\u6536\u5668 \u540d\u79f0 \u51fa\u73b0\u80cc\u666f Serial GC 1999-JDK1.3.1 Parallel GC 2002.2.26-JDK1.4.2 Concurrent Mark Sweep GC 2002.2.26-JDK1.4.2 G1 2012-JDK1.7u4","title":"\u5783\u573e\u56de\u6536\u5668"},{"location":"jvm/memomanage/#serial","text":"\u590d\u5236\u7b97\u6cd5+\u4e32\u884c\u56de\u6536+\"STW\u673a\u5236\" \u5e74\u8f7b\u4ee3","title":"Serial \u56de\u6536\u5668"},{"location":"jvm/memomanage/#serial_1","text":"\u6807\u8bb0-\u538b\u7f29\u7b97\u6cd5+\u4e32\u884c\u56de\u6536+\"STW\u673a\u5236\" \u8001\u5e74\u4ee3","title":"Serial \u56de\u6536\u5668"},{"location":"jvm/memomanage/#parnew","text":"\u590d\u5236\u7b97\u6cd5+\u5e76\u884c\u56de\u6536+\"STW\u673a\u5236\" \u5e74\u8f7b\u4ee3","title":"ParNew \u56de\u6536\u5668"},{"location":"jvm/memomanage/#parallel-scavege","text":"\u590d\u5236\u7b97\u6cd5+\u5e76\u884c\u56de\u6536+\"STW\u673a\u5236\"+\u81ea\u9002\u5e94\u7b56\u7565+\u6700\u4f18\u541e\u5410\u91cf \u5e74\u8f7b\u4ee3","title":"Parallel Scavege\u56de\u6536\u5668"},{"location":"jvm/memomanage/#parallel-old","text":"\u6807\u8bb0-\u538b\u7f29+\u5e76\u884c\u56de\u6536+\"STW\u673a\u5236\" \u8001\u5e74\u4ee3","title":"Parallel Old\u56de\u6536\u5668"},{"location":"jvm/memomanage/#cms","text":"\u6807\u8bb0-\u6e05\u9664+\"STW\u673a\u5236\"+\u5e76\u53d1\u56de\u6536 \u8001\u5e74\u4ee3","title":"CMS\u56de\u6536\u5668"},{"location":"jvm/memomanage/#c1","text":"\u5206\u533a\u7b97\u6cd5","title":"C1\u56de\u6536\u5668"},{"location":"jvm/tool/","text":"JVM\u8c03\u4f18\u5de5\u5177 jclasslib\uff1a\u5b57\u8282\u7801\u67e5\u770b ddd JDK\u81ea\u5e26 JPS jps -q : \u672c\u5730\u865a\u62df\u673a\u552f\u4e00ID jps -l : \u5e26\u4e3b\u7c7b\u540d\u6216\u5305\u8def\u5f84 jps -m : \u5e26\u4f20\u9012\u7ed9\u4e3b\u7c7bmain()\u7684\u53c2\u6570 jps -v : \u5e26JVM\u542f\u52a8\u53c2\u6570 -XX:-UsePerfData : JVM\u4f7f\u7528\u8be5\u53c2\u6570\u540e\uff0cjsp\u65e0\u6cd5\u63a2\u77e5\u8be5JVM\u8fdb\u7a0b JSTAT jstat -class vmid : \u663e\u793avmid\u7c7b\u7684\u88c5\u8f7d\u5378\u8f7d\u603b\u6570\u548c\u603b\u5927\u5c0f jstat -class vmid interval :\u5468\u671f(ms)\u6253\u5370\u7c7b\u7684\u88c5\u8f7d\u5378\u8f7d\u603b\u6570\u548c\u603b\u5927\u5c0f jstat -class vmid interval count :\u5468\u671f(ms)\u6253\u5370\u7c7b\u7684\u88c5\u8f7d\u5378\u8f7d\u603b\u6570\u548c\u603b\u5927\u5c0f\uff0c\u603b\u8ba1count\u6b21 jstat -class -t vmid interval count :\u5468\u671f(ms)\u6253\u5370\u7c7b\u7684\u88c5\u8f7d\u5378\u8f7d\u603b\u6570\u548c\u603b\u5927\u5c0f\uff0c\u603b\u8ba1count\u6b21\uff0c-t\u6253\u5370\u8fdb\u7a0b\u8fd0\u884c\u65f6\u95f4 jstat -class -t -hx vmid interval count :\u5468\u671f(ms)\u6253\u5370\u7c7b\u7684\u88c5\u8f7d\u5378\u8f7d\u603b\u6570\u548c\u603b\u5927\u5c0f\uff0c\u603b\u8ba1count\u6b21\uff0c-t\u6253\u5370\u8fdb\u7a0b\u8fd0\u884c\u65f6\u95f4\uff0c-hx\u8bbe\u7f6ex\u6761\u8bb0\u5f55\u4e3a\u4e00\u8868\u5934 jstat -compiler : JIT\u7f16\u8bd1\u8fc7\u7684\u65b9\u6cd5\u3001\u8017\u65f6\u4fe1\u606f jstat -printcompilation : \u5df2\u7ecf\u88abJIT\u7f16\u8bd1\u8fc7\u7684\u65b9\u6cd5 jstat -gc : S0C S1C S0U S1U EC EU OC OU MC MU CCSC CCSU YGC YGCT FGC FGCT CGC CGCT GCT JINFO","title":"\u8c03\u4f18\u5de5\u5177"},{"location":"jvm/tool/#jvm","text":"jclasslib\uff1a\u5b57\u8282\u7801\u67e5\u770b ddd","title":"JVM\u8c03\u4f18\u5de5\u5177"},{"location":"jvm/tool/#jdk","text":"","title":"JDK\u81ea\u5e26"},{"location":"jvm/tool/#jps","text":"jps -q : \u672c\u5730\u865a\u62df\u673a\u552f\u4e00ID jps -l : \u5e26\u4e3b\u7c7b\u540d\u6216\u5305\u8def\u5f84 jps -m : \u5e26\u4f20\u9012\u7ed9\u4e3b\u7c7bmain()\u7684\u53c2\u6570 jps -v : \u5e26JVM\u542f\u52a8\u53c2\u6570 -XX:-UsePerfData : JVM\u4f7f\u7528\u8be5\u53c2\u6570\u540e\uff0cjsp\u65e0\u6cd5\u63a2\u77e5\u8be5JVM\u8fdb\u7a0b","title":"JPS"},{"location":"jvm/tool/#jstat","text":"jstat -class vmid : \u663e\u793avmid\u7c7b\u7684\u88c5\u8f7d\u5378\u8f7d\u603b\u6570\u548c\u603b\u5927\u5c0f jstat -class vmid interval :\u5468\u671f(ms)\u6253\u5370\u7c7b\u7684\u88c5\u8f7d\u5378\u8f7d\u603b\u6570\u548c\u603b\u5927\u5c0f jstat -class vmid interval count :\u5468\u671f(ms)\u6253\u5370\u7c7b\u7684\u88c5\u8f7d\u5378\u8f7d\u603b\u6570\u548c\u603b\u5927\u5c0f\uff0c\u603b\u8ba1count\u6b21 jstat -class -t vmid interval count :\u5468\u671f(ms)\u6253\u5370\u7c7b\u7684\u88c5\u8f7d\u5378\u8f7d\u603b\u6570\u548c\u603b\u5927\u5c0f\uff0c\u603b\u8ba1count\u6b21\uff0c-t\u6253\u5370\u8fdb\u7a0b\u8fd0\u884c\u65f6\u95f4 jstat -class -t -hx vmid interval count :\u5468\u671f(ms)\u6253\u5370\u7c7b\u7684\u88c5\u8f7d\u5378\u8f7d\u603b\u6570\u548c\u603b\u5927\u5c0f\uff0c\u603b\u8ba1count\u6b21\uff0c-t\u6253\u5370\u8fdb\u7a0b\u8fd0\u884c\u65f6\u95f4\uff0c-hx\u8bbe\u7f6ex\u6761\u8bb0\u5f55\u4e3a\u4e00\u8868\u5934 jstat -compiler : JIT\u7f16\u8bd1\u8fc7\u7684\u65b9\u6cd5\u3001\u8017\u65f6\u4fe1\u606f jstat -printcompilation : \u5df2\u7ecf\u88abJIT\u7f16\u8bd1\u8fc7\u7684\u65b9\u6cd5 jstat -gc : S0C S1C S0U S1U EC EU OC OU MC MU CCSC CCSU YGC YGCT FGC FGCT CGC CGCT GCT","title":"JSTAT"},{"location":"jvm/tool/#jinfo","text":"","title":"JINFO"},{"location":"math/calculus/calculus/","text":"Calculus","title":"\u5fae\u79ef\u5206"},{"location":"math/calculus/calculus/#calculus","text":"","title":"Calculus"}]}